unit UForm_ThreeDimGraph;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.ComCtrls, Vcl.ToolWin, Vcl.ExtDlgs,
  System.ImageList, Vcl.ImgList, VclTee.TeeGDIPlus, VCLTee.TeEngine,
  VCLTee.Series, VCLTee.TeeTools, Vcl.ExtCtrls, VCLTee.TeeProcs, VCLTee.Chart,
  uDrawGraphClass, Vcl.Menus, VCLTee.TeeSurfa, VCLTee.TeeTriSurface,VCLTee.TeePoin3
  ;

type
  TsupportMoveRec=record
    gentime:TdateTime;
    Support:integer;
  end;
  TSmotherThreePoint=record
    pt:TPoint;
    DataV:Double;
  end;
  TSelectPoint=Record
    pt:TPoint;
    Select:Boolean;
  End;
  TForm_ThreeGraph = class(TForm)
    ImageList1: TImageList;
    SavePictureDialog1: TSavePictureDialog;
    ToolBar2: TToolBar;
    SaveButton: TToolButton;
    But_DispWl: TToolButton;
    ToolButton1: TToolButton;
    ExitButton: TToolButton;
    GraphChart: TChart;
    StatusBar1: TStatusBar;
    Panel_ProcessBar: TPanel;
    FirstPGBar: TProgressBar;
    SecondPGBar: TProgressBar;
    PopupMenu_LineGraph: TPopupMenu;
    LineGraphPop_Refresh: TMenuItem;
    N7: TMenuItem;
    LineGraphPop_SaveBMP: TMenuItem;
    N5: TMenuItem;
    Pop_Exit: TMenuItem;
    But_Turn_Right: TToolButton;
    But_Turn_Left: TToolButton;
    But_Turn_top: TToolButton;
    But_Turn_Bottom: TToolButton;
    But_Turn_Redo: TToolButton;
    ThreeSeries: TSurfaceSeries;
    But_ChangFillColor: TToolButton;
    But_MarkStep: TToolButton;
    N1: TMenuItem;
    N2: TMenuItem;
    N3: TMenuItem;
    N4: TMenuItem;
    N51: TMenuItem;
    N6: TMenuItem;
    N8: TMenuItem;
    N9: TMenuItem;
    N10: TMenuItem;
    N11: TMenuItem;
    N12: TMenuItem;
    procedure FormDestroy(Sender: TObject);
    procedure FormCloseQuery(Sender: TObject; var CanClose: Boolean);
    procedure FormCreate(Sender: TObject);
    procedure GraphChartMouseWheel(Sender: TObject; Shift: TShiftState;
      WheelDelta: Integer; MousePos: TPoint; var Handled: Boolean);
    procedure GraphChartGetAxisLabel(Sender: TChartAxis; Series: TChartSeries;
      ValueIndex: Integer; var LabelText: string);
    procedure ExitButtonClick(Sender: TObject);
    procedure ToolButton1Click(Sender: TObject);
    procedure SaveButtonClick(Sender: TObject);
    procedure Pop_ExitClick(Sender: TObject);
    procedure LineGraphPop_RefreshClick(Sender: TObject);
    procedure LineGraphPop_SaveBMPClick(Sender: TObject);
    procedure GraphChartMouseDown(Sender: TObject; Button: TMouseButton;
      Shift: TShiftState; X, Y: Integer);
    procedure But_Turn_RightClick(Sender: TObject);
    procedure But_Turn_LeftClick(Sender: TObject);
    procedure But_Turn_topClick(Sender: TObject);
    procedure But_Turn_BottomClick(Sender: TObject);
    procedure But_Turn_RedoClick(Sender: TObject);
    procedure But_ChangFillColorClick(Sender: TObject);
    procedure But_DispWlClick(Sender: TObject);
    procedure But_MarkStepClick(Sender: TObject);
    procedure N1Click(Sender: TObject);
    procedure N3Click(Sender: TObject);
    procedure N2Click(Sender: TObject);
    procedure N4Click(Sender: TObject);
    procedure N51Click(Sender: TObject);
    procedure N8Click(Sender: TObject);
    procedure N10Click(Sender: TObject);
    procedure N12Click(Sender: TObject);
    procedure GraphChartDblClick(Sender: TObject);
  private
     MySupportMove_count:integer;
     MySupportMove:Array of TsupportMoveRec;
     loadData:Boolean;
     MarkerStep,DispMark:Boolean;
     EXCaption:string;
     Whole_MaxValue:double;
     JinDaotimeCount:integer;
     JinDaotimeArray :Array of TContourFootageData;
     tmpIni,tmpWl:integer;
    { Private declarations }
    procedure ClearMySupportMove;
    procedure AddSupportMove(Rc:TsupportMoveRec);
    procedure MakeLineGraphChartTitle(Chart: Tchart);
    procedure SetChartAxisMaxAndMinValue(BottomAxis: TChartAxis;MaxV,MinV:double);
    procedure MakeWindowsSingle(Single:integer);
    // 三维差值算法
    function  Inverse_Distance_Powe(p0,p1,p2,p3,p4:TSmotherThreePoint) :TSmotherThreePoint;// 反距离插值算法
    procedure SetSelectPointIsFalse(SePoint:Array of TSelectPoint);
    function  SelectMinDisPoint(var SePoint:Array of TSelectPoint;P0:TPoint):TPoint;
    function  selectFromFourFangxiang(var TD:TDoubleContourRecord; pt:TPoint; AGV:double;
                min_Dao,Max_Dao,Min_Sup,Max_Sup:integer ):Boolean;
    //
    procedure FillSeiesData(Series:TCustom3DSeries);
    procedure TianJianStepInfo(Chart: Tchart);
    procedure setSeriesLevelColor(Max_V,Min_V:Double);
    Function   GetContourColor(Mia_V,Min_V:Double;xh:integer; Var Up_Value:double ):TColor;  // 获得云图颜色区分
    //-----
    function  GetJinDaoFromJinDaotimeArray(TD,DT:String):String;
     // 加载数据
     procedure ClearJinDaotimeArray;
     procedure AddJinDaotimeArray(Rec:TContourFootageData);
     procedure LoadJinDaoAndTime(MinDao,MaxDao:integer);
     //
     function  CreateSaveBmpPath:String; //创建保存图片的文件路径
    function  LineGraphChartSaveIntoBMP(Path:string):Boolean;
    function  GetLineGraphChartBmpFileName:String;  //获取LineGraph保存文件的文件名
      // 控制 快捷工具栏
     procedure DispLineGraphPop(Px,Py:Integer);//显示GraphChart 控制的工具栏
     function SetMarkLabelVisible(Value:Boolean):Boolean;
  public
     DW_ThreeDim:TDrawGrap;  // 定义的类

    procedure LoadsupportMoveData;
    procedure SmoothThreeDimPointValue(min_Dao,Max_Dao,Min_Sup,Max_Sup:integer);
    procedure InitForm(DW:TDrawGrap);
    procedure RefreshChartGraph;
    { Public declarations }
  end;

function CreateThreeGraph(AHandle:THandle;ACaption:string;Wid,Hi,Single:integer):THandle;stdcall;

var
  Form_ThreeGraph: TForm_ThreeGraph;

implementation

{$R *.dfm}

uses UMainDataModule, Lu_Public_BasicModual, UMakeRuleClass,math;
//-------------------
function CreateThreeGraph(AHandle:THandle;ACaption:string;Wid,Hi,Single:integer):THandle;stdcall;
{

  Single 0 正常页面  1 全屏页面
}
begin
        if Assigned(Form_ThreeGraph) then  FreeAndNil(Form_ThreeGraph);
        Application.Handle :=AHandle;
        Form_ThreeGraph:=TForm_ThreeGraph.Create(Application);

         try
           with Form_ThreeGraph do begin
               EXCaption:=ACaption;
             //  WindowState:= wsMaximized;
               ParentWindow:=Ahandle;
               MakeWindowsSingle(Single);

               if Hi >Height then
                   Top :=Round((Hi-Height)/3)  else   Top :=0;
               if Wid> Width then
                   Left:=Round((Wid-Width)/2)  else   Left:=0;

               Show;
               Result:=Form_ThreeGraph.Handle ;//函数值
          end ;
        except
           FreeAndNil(Form_ThreeGraph);
        end;


end;
{ TUForm_MoveSupport }

procedure TForm_ThreeGraph.AddJinDaotimeArray(Rec: TContourFootageData);
begin
  inc(JinDaotimeCount);
   setlength(JinDaotimeArray,JinDaotimeCount);
   JinDaotimeArray[JinDaotimeCount-1]:=Rec;
end;

procedure TForm_ThreeGraph.AddSupportMove(Rc: TsupportMoveRec);
begin
   inc(MySupportMove_count);
   setlength(MySupportMove,MySupportMove_count);
   MySupportMove[MySupportMove_count-1]:=Rc;
end;

procedure TForm_ThreeGraph.But_Turn_BottomClick(Sender: TObject);
begin
  if GraphChart.View3DOptions.Orthogonal then  GraphChart.View3DOptions.Orthogonal:=False;
  if GraphChart.View3DOptions.Perspective >5 then
       GraphChart.View3DOptions.Perspective:= GraphChart.View3DOptions.Perspective-5;
end;

procedure TForm_ThreeGraph.But_Turn_LeftClick(Sender: TObject);
begin
   if GraphChart.View3DOptions.Orthogonal then  GraphChart.View3DOptions.Orthogonal:=False;
    GraphChart.View3DOptions.Rotation :=  GraphChart.View3DOptions.Rotation+10;
end;

procedure TForm_ThreeGraph.But_Turn_RedoClick(Sender: TObject);
begin
   GraphChart.View3DOptions.Orthogonal :=True;
end;

procedure TForm_ThreeGraph.But_Turn_RightClick(Sender: TObject);
begin
   if GraphChart.View3DOptions.Orthogonal then  GraphChart.View3DOptions.Orthogonal:=False;
   GraphChart.View3DOptions.Rotation :=  GraphChart.View3DOptions.Rotation-10;
end;

procedure TForm_ThreeGraph.But_Turn_topClick(Sender: TObject);
begin
    if GraphChart.View3DOptions.Orthogonal then  GraphChart.View3DOptions.Orthogonal:=False;
   if GraphChart.View3DOptions.Perspective<=85 then
       GraphChart.View3DOptions.Perspective:= GraphChart.View3DOptions.Perspective+5;
end;

procedure TForm_ThreeGraph.ClearJinDaotimeArray;
begin
    JinDaotimeCount:=0;
 setlength(JinDaotimeArray,JinDaotimeCount);
end;

procedure TForm_ThreeGraph.ClearMySupportMove;
begin
   MySupportMove_count:=0;
   setlength(MySupportMove,0);
end;

function TForm_ThreeGraph.CreateSaveBmpPath: String;
var
 BmpPath:WideString;
begin
    BmpPath:=Public_Basic.Get_MyModulePath+'SaveBmp\KYFX\'+Trim(IntTostr(DW_ThreeDim.FGzm.Gzmbh)) + '\'  ;
    if  not DirectoryExists(BmpPath) then
         ForceDirectories(BmpPath);

    Result:=BmpPath;
end;

procedure TForm_ThreeGraph.DispLineGraphPop(Px, Py: Integer);
begin
    LineGraphPop_SaveBmp.Enabled :=true;
    PopupMenu_LineGraph.Popup(px,py);
end;

procedure TForm_ThreeGraph.ExitButtonClick(Sender: TObject);
begin
    Close;
end;

procedure TForm_ThreeGraph.FillSeiesData(Series: TCustom3DSeries);
var
  i,j:integer;
begin
    Series.Clear ;
   for I := DW_ThreeDim.DataTimeAndFootAge.Graph_MinDao to DW_ThreeDim.DataTimeAndFootAge.Graph_MaxDao do   begin  // 刀数
       for j := 1 to DW_ThreeDim.FGzm.SupEndNumber do     //  支架数
        if  DW_ThreeDim.MyContourDoubleGrid[i][j].SmoothData >0 then  begin
             Series.AddXYZ(i,
                           DW_ThreeDim.MyContourDoubleGrid[i][j].SmoothData *DW_ThreeDim.ColorValue.MPaChangeKN_Xs,
                           j
                           );

         end;

   end;



end;

procedure TForm_ThreeGraph.FormCloseQuery(Sender: TObject;
  var CanClose: Boolean);
begin
    if Assigned(Form_ThreeGraph) then  FreeandNil(Form_ThreeGraph);

end;

procedure TForm_ThreeGraph.FormCreate(Sender: TObject);
begin
   Public_basic.InitStatusBar(StatusBar1);
end;

procedure TForm_ThreeGraph.FormDestroy(Sender: TObject);
begin
     ClearMySupportMove;
end;

function TForm_ThreeGraph.GetContourColor(Mia_V, Min_V: Double; xh: integer;
  var Up_Value: double): TColor;
var
   ContourColor : array [0..10] of TColor;
   dis:double;
begin
    ContourColor[0]:=clwhite;    ContourColor[1]:=clInfoBk;   {白  淡黄}
    ContourColor[2]:=ClYellow;    ContourColor[3]:=$00E500;   {黄  浅绿}
    ContourColor[4]:=$0C8918;    ContourColor[5]:=clBlue;   {深绿  深蓝}
    ContourColor[6]:=$0080FF;    ContourColor[7]:=ClFuchsia;   {橙红 绯红 }
    ContourColor[8]:=$0000FF;    ContourColor[9]:=$000080;   { 红 深红}
    if xh > 6 then   exit;
    dis:=(Mia_V- Min_V)/6;
    Up_Value:=Min_V+dis*xh;
    Result:=ContourColor[3+xh];

end;

function TForm_ThreeGraph.GetJinDaoFromJinDaotimeArray(TD,
  DT: String): String;
{ DT  JinDao, Down_Footage,Upper_Footage;}
var
  tmp_TD:TdateTime;
  i,selectid:integer;
begin
    { JinDaotimeCount:integer;
     JinDaotimeArray :Array of TContourFootageData;
}
    Result:='';
    selectid:=-1;
    if trim(TD) ='' then   exit;
    tmp_TD:=StrToDateTime(TD,Public_Basic.FSetting);
    for I := 0 to JinDaotimeCount-1 do begin
       if i< JinDaotimeCount-1 then   begin
          if (JinDaotimeArray[i].DT <= tmp_TD ) and (JinDaotimeArray[i+1].DT > tmp_TD) then  begin
              selectid:=i;
              break;
          end;
       end else  if i= JinDaotimeCount-1 then   begin
          if (JinDaotimeArray[i].DT <= tmp_TD ) then begin
              selectid:=i;
              break;
          end;
       end;

    end;

    if selectid>0 then  begin
       if DT='JinDao' then begin
          Result:=IntTostr(JinDaotimeArray[i].Daoshu);
       end else if  DT='Down_Footage' then begin
          Result:=FormatFloat('0.0',JinDaotimeArray[i].Down_footage);
       end else if  DT='Upper_Footage' then begin
          Result:=FormatFloat('0.0',JinDaotimeArray[i].Upper_Footage);
       end;

    end;
end;

function TForm_ThreeGraph.GetLineGraphChartBmpFileName: String;
var
  MinLab,MaxLab:integer;
begin
   Result:='';
   if DW_ThreeDim.FGzm.Gzmbh <1 then  exit;
   MinLab:=DW_ThreeDim.DataTimeAndFootAge.Graph_MinDao;
   MaxLab:=DW_ThreeDim.DataTimeAndFootAge.Graph_MaxDao;
   Result:='SMV_'+'_'+Trim(IntTostr(MinLab))+ '_'+Trim(IntTostr(MaxLab)) ;
end;

procedure TForm_ThreeGraph.GraphChartDblClick(Sender: TObject);
begin
//    DispMark:=not DispMark;
//    SetMarkLabelVisible(DispMark);

end;

procedure TForm_ThreeGraph.GraphChartGetAxisLabel(Sender: TChartAxis;
  Series: TChartSeries; ValueIndex: Integer; var LabelText: string);
var
  LabDaoshu:double;
  Daoshu:integer;
  Text:String;
begin
        if Sender=GraphChart.BottomAxis.SubAxes.Items[0] then   begin
             Text:=StringReplace (LabelText, ',', '', [rfReplaceAll]);
             Daoshu:=Round(Public_Basic.StrToDouble_Lu(Text));
            if (Daoshu>= 0  ) and (Daoshu <DW_ThreeDim.FilledContourDataNumber ) then  begin
                if DW_ThreeDim.ConTourSeriesPar.Display_DownFootage =1 then  begin
                    if (DW_ThreeDim.FilledContourData[Daoshu].Down_footage >0)then   begin
                        LabelText:=FormatFloat('0',DW_ThreeDim.FilledContourData[Daoshu].Down_footage  ) ;
                    end else begin
                        LabelText:='';
                    end;

                end else begin
                    if DW_ThreeDim.FilledContourData[Daoshu].DT>10000 then   begin
                       LabelText:=FormatDateTime('yyyy-mm-dd',DW_ThreeDim.FilledContourData[Daoshu].DT  ) ;
                    end else begin
                       LabelText:='';
                    end;
                end;
            end else begin
               LabelText:='';
            end;

        end;


end;

procedure TForm_ThreeGraph.GraphChartMouseDown(Sender: TObject;
  Button: TMouseButton; Shift: TShiftState; X, Y: Integer);
 var
  pt:Tpoint;
begin

   if Button=mbRight then begin
      pt:= GraphChart.ClientToScreen(Point(0,0));
      DispLineGraphPop(pt.X+x,pt.Y +y);

   end;

end;

procedure TForm_ThreeGraph.GraphChartMouseWheel(Sender: TObject;
  Shift: TShiftState; WheelDelta: Integer; MousePos: TPoint;
  var Handled: Boolean);
begin
//     if WheelDelta>0 then  begin  //滚轮  前推 放大
//         GraphChart.ZoomPercent( 110 );
//     end else begin   //滚轮  后滚 缩小
//         GraphChart.ZoomPercent( 90);
//     end;

end;

procedure TForm_ThreeGraph.InitForm(DW: TDrawGrap);
begin
   loadData:=False;
   DW_ThreeDim:=DW;
   GraphChart.Align :=AlClient;
   Whole_MaxValue:=0;
   DispMark:=False;
   //
   tmpIni:=0; tmpWl:=0;
   MarkerStep:=False;
end;

function TForm_ThreeGraph.Inverse_Distance_Powe(p0, p1, p2, p3,
  p4: TSmotherThreePoint): TSmotherThreePoint;
var
  D_i,W_i :Array [0..3] of double;
  D_s:double;
  i:integer;
begin
     d_i[0]:=sqrt(sqr(p1.pt.x-p0.pt.x)+sqr(p1.pt.Y -p0.pt.Y));
     d_i[1]:=sqrt(sqr(p2.pt.X-p0.pt.x)+sqr(p2.pt.Y -p0.pt.Y));
     d_i[2]:=sqrt(sqr(p3.pt.X-p0.pt.x)+sqr(p3.pt.Y -p0.pt.Y));
     d_i[3]:=sqrt(sqr(p4.pt.X-p0.pt.x)+sqr(p4.pt.Y -p0.pt.Y));
     D_s:=0;
     for I := 0 to 3 do
       if d_i[i]>0 then  D_s:=D_s+1/d_i[i];

     if D_s=0 then D_s:=1;
     for I := 0 to 3 do begin
         if d_i[i]>0 then  begin
            W_i[i]:=1/d_i[i]/D_s;
         end  else  begin
            W_i[i]:=0;
         end;
     end;

    P0.DataV:=p1.DataV * w_i[0]+  p2.DataV * w_i[1]  + p3.DataV * w_i[2] +  p4.DataV * w_i[3];

    Result:=P0;

end;

function TForm_ThreeGraph.LineGraphChartSaveIntoBMP(Path: string): Boolean;
var
  FileName,tmp:string;
begin
   if trim(Path) <> '' then  begin
          if SavePictureDialog1.FilterIndex =2 then  begin
             if ExtractFileExt(SavePictureDialog1.FileName) <> '.jpg' then
                 SavePictureDialog1.FileName := ChangeFileExt(SavePictureDialog1.FileName,'.jpg');
          end else if SavePictureDialog1.FilterIndex =3 then  begin
             if ExtractFileExt(SavePictureDialog1.FileName) <> '.png' then
                 SavePictureDialog1.FileName := ChangeFileExt(SavePictureDialog1.FileName,'.png');
          end else  begin
             if ExtractFileExt(SavePictureDialog1.FileName) <> '.bmp' then
                 SavePictureDialog1.FileName := ChangeFileExt(SavePictureDialog1.FileName,'.bmp');
          end;
          GraphChart.SaveToBitmapFile(SavePictureDialog1.FileName);
          if Public_Basic.Licensing  then  Public_Basic.AddSingleTextWaterFromFile(SavePictureDialog1.FileName)
            else Public_Basic.AddMultTextWaterFormFile(SavePictureDialog1.FileName);
   end else begin
      tmp:=GetLineGraphChartBmpFileName;
      if tmp ='' then  exit;
      FileName:=CreateSaveBmpPath+ tmp +'_'+'0.bmp';
      GraphChart.SaveToBitmapFile(FileName);
      if Public_Basic.Licensing  then  Public_Basic.AddSingleTextWaterFromFile(FileName)
            else Public_Basic.AddMultTextWaterFormFile(FileName);

   end;

end;

procedure TForm_ThreeGraph.LineGraphPop_RefreshClick(Sender: TObject);
begin
     RefreshChartGraph;
end;

procedure TForm_ThreeGraph.LineGraphPop_SaveBMPClick(Sender: TObject);
begin
   SavePictureDialog1.Execute ;
   LineGraphChartSaveIntoBMP(SavePictureDialog1.FileName);
end;

procedure TForm_ThreeGraph.LoadJinDaoAndTime(MinDao, MaxDao: integer);
var
  sql,Strdt:string;
  MaxTime:TDateTime;
  Rd:TJinDaoRecord;
  MySqlDataSet1 :TMyDataSet;
  rec:TContourFootageData;
begin
    MySqlDataSet1:=TMyDataSet.Create(nil);
    MySqlDataSet1.MySqlConnection :=MainDataModule.ExConn;

    MySqlDataSet1.Close ;

   Strdt:=Public_Basic.ReturnDateTimeString(MainDataModule.DataType ,MaxTime);

   Sql:=' select * from  D_'+IntToStr(DW_ThreeDim.FGzm.Gzmbh)+'_footage ' +
        ' where  DaoShu >= ' + IntTostr(MinDao) +  ' and  DaoShu <= ' + IntToStr(MaxDao) +
        ' order by Daoshu  ' ;
   self.ClearJinDaotimeArray;
   MySqlDataSet1.CommandText :=sql;
   try
      if MySqlDataSet1.Open then
       while not MySqlDataSet1.Eof  do  begin
          DW_ThreeDim.StepProcegressBar(FirstPGBar,SecondPGBar,0,10);
          rec.DT :=MySqlDataSet1.FieldByName('FootDay').AsDateTime;
          rec.Down_footage:=MySqlDataSet1.FieldByName('sumdownfootage').AsFloat;
          rec.Upper_Footage:=MySqlDataSet1.FieldByName('sumUpperfootage').AsFloat;
          rec.Daoshu:=MySqlDataSet1.FieldByName('DaoShu').AsInteger;
          AddJinDaotimeArray(Rec);
          MySqlDataSet1.Next;
       end;
   finally
      MySqlDataSet1.Close ;
      FreeAndNil(MySqlDataSet1);
   end;
end;

procedure TForm_ThreeGraph.LoadsupportMoveData;
var
  sql1:string;
  St_dt,ed_dt:string;
  SupportBh:integer;
  tmp:TsupportMoveRec;
begin
    ClearMySupportMove;
    DW_ThreeDim.SetProcegressBarVisual(Panel_ProcessBar,FirstPGBar,SecondPGBar,true,100,100);
    St_dt:=Public_Basic.ReturnDateTimeString(MainDataModule.DataType ,DW_ThreeDim.DataTimeAndFootAge.StartTime);
    ed_dt:=Public_Basic.ReturnDateTimeString(MainDataModule.DataType ,DW_ThreeDim.DataTimeAndFootAge.EndTime);
    Sql1:=' select * from  D_'+IntToStr(DW_ThreeDim.FGzm.Gzmbh)+'_SupportMoveInfo ' +
               ' where endtime >= ' + St_dt + ' and endtime <= ' +ed_dt+ ' order by SupportBh';
     MainDataModule.MyDataSet.Close ;
     MainDataModule.MyDataSet.CommandText :=sql1;
     SupportBh:=0;
     try
         if MainDataModule.MyDataSet.Open then begin
            while not MainDataModule.MyDataSet.Eof  do begin
                 if SupportBh <> MainDataModule.MyDataSet.FieldByName('Supportbh').AsInteger then  begin
                    SupportBh:=MainDataModule.MyDataSet.FieldByName('Supportbh').AsInteger;
                    DW_ThreeDim.StepProcegressBar(FirstPGBar,SecondPGBar,1,0);
                 end;
                 DW_ThreeDim.StepProcegressBar(FirstPGBar,SecondPGBar,0,10);
                 tmp.gentime :=MainDataModule.MyDataSet.FieldByName('endtime').AsDateTime;
                 tmp.Support :=SupportBh;
                 AddSupportMove(tmp);
                 MainDataModule.MyDataSet.Next
            end;
         end;
     finally
        MainDataModule.MyDataSet.Close ;
        loadData:=true;
     end;
     //提取进刀信息
     LoadJinDaoAndTime(DW_ThreeDim.DataTimeAndFootAge.Graph_MinDao,
                     DW_ThreeDim.DataTimeAndFootAge.Graph_MaxDao);
     DW_ThreeDim.SetProcegressBarVisual(Panel_ProcessBar,FirstPGBar,SecondPGBar,False,0,0);
end;

procedure TForm_ThreeGraph.MakeLineGraphChartTitle(Chart: Tchart);
var
 Caption:String;
 lowTime,highTime,InterValTime:integer;
 i:integer;
begin

    Chart.Title.Font.Color :=ClBlack;
    Caption:= MainDataModule.Coal_Name+'煤矿【'+MainDataModule.WorkFace_Name +'工作面】矿压显现三维应力云图';

    Chart.MarginLeft :=50;
    Chart.Title.TextAlignment:=taCenter;
    Chart.Title.Font.Name :='黑体';
    Chart.Title.Font.Size :=14;
    Chart.Title.Caption := Caption;

    Chart.SubTitle.Font.Color :=ClBlack;
    Chart.SubTitle.TextAlignment:=taCenter;
    Chart.SubTitle.Font.Name :='宋体';
    Chart.SubTitle.Font.Size :=9;

    Caption:='起止日期:'+FormatDateTime('yyyy-mm-dd hh:nn ',DW_ThreeDim.DataTimeAndFootAge.StartTime)
                            +'('+FormatFloat('0.00',DW_ThreeDim.DataTimeAndFootAge.Minfootage)+  '米)--' +
                             FormatDateTime('yyyy-mm-dd hh:nn ',DW_ThreeDim.DataTimeAndFootAge.EndTime) +
                             '('+FormatFloat('0.00',DW_ThreeDim.DataTimeAndFootAge.MAXfootage)+  '米)';

    Chart.SubTitle.Caption := Caption;
    Chart.SubTitle.Font.Color :=ClBlack;

    Chart.BottomAxis.Visible :=true;
    Chart.BottomAxis.DateTimeFormat:='YYYY-MM-DD HH:NN:SS' ;
//    Chart.TopAxis.Visible :=true;
//    Chart.TopAxis.DateTimeFormat:='YYYY-MM-DD HH:NN:SS' ;
    Chart.BottomAxis.SubAxes.Items[0].Visible :=true;
    Chart.BottomAxis.SubAxes.Items[0].DateTimeFormat:='YYYY-MM-DD HH:NN:SS' ;

    //控制坐标横轴的显示方式
     Chart.ScrollMouseButton:=mbleft;
     Chart.AllowPanning:=pmHorizontal;

    Chart.BottomAxis.Title.Caption :='累计进刀';
    Chart.BottomAxis.Title.Position  :=tpStart ;

    if  DW_ThreeDim.ConTourSeriesPar.Display_DownFootage=1 then  begin
      Chart.BottomAxis.SubAxes.Items[0].Title.Caption:='累计进尺';
    end else begin
      Chart.BottomAxis.SubAxes.Items[0].Title.Caption:='开采时间';
    end;

    Chart.BottomAxis.SubAxes.Items[0].Title.Position:=tpEnd;


//    Chart.TopAxis.Visible :=true;
    Chart.LeftAxis.Title.Caption :='整架压力KN';
    Chart.LeftAxis.Title.Position  :=tpCenter ;
    //
//    Chart.BottomAxis.Automatic :=false;
//    Chart.BottomAxis.Minimum:=0;
//    Chart.BottomAxis.Maximum:=DW_ThreeDim.DataTimeAndFootAge.StartTime+4;
//    Chart.BottomAxis.Minimum:=DW_ThreeDim.DataTimeAndFootAge.StartTime;
//    Chart.TopAxis.Automatic :=false;
//    Chart.TopAxis.Minimum:=0;
//    Chart.TopAxis.Maximum:=DW_ThreeDim.DataTimeAndFootAge.StartTime+4;
//    Chart.TopAxis.Minimum:=DW_ThreeDim.DataTimeAndFootAge.StartTime;
    // 把 工具条隐藏
    Chart.Legend.Visible:=False;
end;

procedure TForm_ThreeGraph.MakeWindowsSingle(Single: integer);
begin
     if Single=0 then  begin
         BorderStyle:=BsSizeable;
         ToolBar2.Visible :=true;
         StatusBar1.Visible :=true;
     end else begin
         BorderStyle:=BsNone;
         ToolBar2.Visible :=False;
         StatusBar1.Visible :=False;
     end;
end;

procedure TForm_ThreeGraph.N10Click(Sender: TObject);
begin
   But_ChangFillColor.Click;
end;

procedure TForm_ThreeGraph.N12Click(Sender: TObject);
begin
  But_DispWl.Click;
end;

procedure TForm_ThreeGraph.N1Click(Sender: TObject);
begin
   But_Turn_Redo.Click ;
end;

procedure TForm_ThreeGraph.N2Click(Sender: TObject);
begin
   But_Turn_left.Click ;
end;

procedure TForm_ThreeGraph.N3Click(Sender: TObject);
begin
   But_Turn_Right.Click;
end;

procedure TForm_ThreeGraph.N4Click(Sender: TObject);
begin
    But_Turn_top.Click;
end;

procedure TForm_ThreeGraph.N51Click(Sender: TObject);
begin
    But_Turn_bottom.Click;
end;

procedure TForm_ThreeGraph.N8Click(Sender: TObject);
begin
   But_MarkStep.Click;
end;

procedure TForm_ThreeGraph.But_DispWlClick(Sender: TObject);
var
 bmap1:Tbitmap;//创建位图 bitmap1
begin
   inc(tmpWl);
   if tmpWl=1 then  begin
      ThreeSeries.SideBrush.Clear ;
   end else if tmpWl=2 then  begin
      //ThreeSeries.SideBrush.Image.Bitmap.
      ThreeSeries.SideBrush.Image.Bitmap:=nil;
      ThreeSeries.SideBrush.BackColor:=clGray;
      ThreeSeries.SideBrush.Color :=ClYellow;
      try
         bmap1:=Tbitmap.Create;//创建位图 bitmap1
         MainDataModule.MySqliteDataBase.GetBMPToSQlite('ht.bmp','1',bmap1);
         ThreeSeries.SideBrush.Image.Bitmap :=bmap1;

      finally
         FreeAndNil(bmap1);
      end;
   end  else  if tmpWl=3 then  begin
      ThreeSeries.SideBrush.Image.Bitmap:=nil;
      ThreeSeries.SideBrush.BackColor:=clGray;
      ThreeSeries.SideBrush.Color :=ClYellow;
      try
         bmap1:=Tbitmap.Create;//创建位图 bitmap1
         MainDataModule.MySqliteDataBase.GetBMPToSQlite('m.bmp','1',bmap1);
         ThreeSeries.SideBrush.Image.Bitmap :=bmap1;
      finally
         FreeAndNil(bmap1);
      end;
   end  else  if tmpWl=4 then  begin
      ThreeSeries.SideBrush.Image.Bitmap:=nil;
      ThreeSeries.SideBrush.BackColor:=ClGreen;
      ThreeSeries.SideBrush.Color :=ClYellow;
   end else if  tmpWl=5 then  begin
      ThreeSeries.SideBrush.Image.Bitmap:=nil;
      ThreeSeries.SideBrush.BackColor:=clGray;
      ThreeSeries.SideBrush.Color :=ClYellow;
      tmpWl:=0;
   end;

end;

procedure TForm_ThreeGraph.But_MarkStepClick(Sender: TObject);
begin
  MarkerStep:=not MarkerStep;
  if MarkerStep then  begin
     But_MarkStep.Caption :='隐藏标注';
  end else  begin
     But_MarkStep.Caption :='标注显现';
  end;

  RefreshChartGraph;
end;

procedure TForm_ThreeGraph.Pop_ExitClick(Sender: TObject);
begin
   Close;
end;

procedure TForm_ThreeGraph.RefreshChartGraph;
var
 i_Count,i:integer;
begin
  // ThreeSeries.HorizAxis:=aBothHorizAxis ;
   i_Count:=0;
   while i_Count < GraphChart.SeriesCount do  begin
      if GraphChart[i_Count] is TPoint3DSeries then begin
         GraphChart[i_Count].Free;
      end else begin
         inc(i_Count);
      end;

   end;

   MakeLineGraphChartTitle(GraphChart);

   if loadData then  begin
      DW_ThreeDim.ChangeThreeArrayContourGrid(DW_ThreeDim.ColorValue.UnitType,
                                   Ord(DW_ThreeDim.CloudClass.Yuntu_CycleData) );
      FillSeiesData(ThreeSeries);
       if (DW_ThreeDim.CloudClass.RockPressAnslysis) and (MarkerStep)  then   begin
          TianJianStepInfo(GraphChart);
       end;
   end;
   setSeriesLevelColor(Whole_MaxValue ,DW_ThreeDim.FGzm.Usedsupport.initLoad/DW_ThreeDim.ColorValue.UnitValue);

   GraphChart.Refresh;
  // LineGraphChartSaveIntoBMP('');

end;

procedure TForm_ThreeGraph.SaveButtonClick(Sender: TObject);
begin
   RefreshChartGraph;
end;

function TForm_ThreeGraph.selectFromFourFangxiang(var TD: TDoubleContourRecord;
  pt: TPoint; AGV:double;min_Dao,Max_Dao,Min_Sup,Max_Sup:integer): Boolean;
var
  Dao,Sup,i,C_i,Flag:integer;
  findB:Boolean;
  ArPt: array [0..4] of TSmotherThreePoint;
  t_D,t_S,S_C:integer;

begin
   findB:=False;
   Dao:=pt.X;Sup:=pt.Y;
   C_i:=1;Flag:=1; S_C:=0;   t_D:=0;t_S:=0;
   for I := 0 to 3 do    begin
        repeat
            if t_D< C_i then begin
               Dao:=Dao+Flag;   inc(t_D);
            end else if t_S<C_i then  begin
               Sup:=sup+Flag;  inc(T_s);
            end else begin
              inc(C_i);
              Flag:=-Flag;
              t_S:=0;
              t_D:=0;
              Dao:=Dao+Flag;   inc(t_D);
            end;


            if Dao<min_Dao then  begin
               Dao:=0;
                if TD[Dao][sup].SmoothData <0 then  TD[Dao][sup].SmoothData :=AGV;
            end;
            if Dao> Max_Dao then  begin
               Dao:=Max_Dao;
                if TD[Dao][sup].SmoothData <0 then TD[Dao][sup].SmoothData :=AGV;
            end;
            if sup<Min_Sup then begin
                Sup:=Min_Sup;
                if TD[Dao][sup].SmoothData <0 then TD[Dao][sup].SmoothData :=AGV;
            end;
            if Sup>Max_Sup then begin
               Sup:= Max_Sup;
               if TD[Dao][sup].SmoothData <0 then TD[Dao][sup].SmoothData :=AGV;
            end;


            inc(S_C);
            if S_C >900  then    break;

       until (TD[Dao][sup].SmoothData > 0 ) ;

        if S_C >900  then    break;

        if TD[Dao][sup].SmoothData>0  then begin
           ArPt[i].pt.X:=Dao;
           ArPt[i].pt.Y:=sup;
           ArPt[i].DataV:=TD[Dao][sup].SmoothData;
        end;

   end;

   if S_C> 900 then  begin
      TD[pt.x][pt.y].SmoothData:= AGV;
   end else begin
      ArPt[4].pt := pt;
      ArPt[4]:=Inverse_Distance_Powe(ArPt[4],ArPt[0],ArPt[1],ArPt[2],ArPt[3]);
      TD[pt.x][pt.y].SmoothData:=ArPt[4].DataV;
   end;

end;

function TForm_ThreeGraph.SelectMinDisPoint(var SePoint: array of TSelectPoint;
  P0: TPoint):TPoint;
var
  i:integer;
  Minid:integer;
  dis:double;
begin
    dis:=10000000;Minid:=-1;
    for I := 0 to High(SePoint) do   begin
      if SePoint[i].Select then   continue;
      if dis > sqrt(sqr(SePoint[i].pt.x-p0.x)+sqr(SePoint[i].pt.Y -p0.Y)) then begin
         dis := sqrt(sqr(SePoint[i].pt.x-p0.x)+sqr(SePoint[i].pt.Y -p0.Y));
         Minid:=i;
      end;

    end;

    if Minid>=0 then  begin
       SePoint[Minid].Select:=true;
       Result:=SePoint[Minid].pt;
    end else begin
       Result:=SePoint[0].pt ;
    end;


end;

procedure TForm_ThreeGraph.SetChartAxisMaxAndMinValue(BottomAxis: TChartAxis;
  MaxV, MinV: double);
begin
  BottomAxis.Automatic :=False;
  BottomAxis.Minimum :=0;
  if MaxV <10 then    BottomAxis.Maximum:=10
         else   BottomAxis.Maximum := MaxV;
  if MinV< MaxV then  begin
     BottomAxis.Minimum :=MinV;
  end;
end;

function TForm_ThreeGraph.SetMarkLabelVisible(Value: Boolean): Boolean;
var
  i:integer;
begin
   for I := 0 to graphChart.SeriesCount -1 do
      if graphChart.Series[i] is TPoint3DSeries then
         graphChart.Series[i].Marks.Visible :=Value;

end;

procedure TForm_ThreeGraph.SetSelectPointIsFalse(
  SePoint: array of TSelectPoint);
var
  i:integer;
begin
   for I := 0 to High(SePoint) do
       SePoint[i].Select:=False;
end;

procedure TForm_ThreeGraph.setSeriesLevelColor(Max_V, Min_V: Double);
begin
    ThreeSeries.UseColorRange :=False;
    ThreeSeries.UsePalette :=true;
    ThreeSeries.PaletteStyle :=psRainbow;
    ThreeSeries.PaletteSteps:=32;
    //
    ThreeSeries.SideBrush.Image.Bitmap:=nil;
    ThreeSeries.SideBrush.BackColor:=ClGreen;
    ThreeSeries.SideBrush.Color :=ClYellow;
end;

procedure TForm_ThreeGraph.SmoothThreeDimPointValue(min_Dao, Max_Dao, Min_Sup,
  Max_Sup: integer);
var
  dao,sup,i,j:integer;
  tmpStep:TOldOneStep;
  AryPt:Array [0..4] of TSmotherThreePoint;
  iPt:TSmotherThreePoint;
  SelectPoint:Array [0..7] of TSelectPoint ;
  AGV_Data,tmpV,Upper_Bl,ce:Double;
  tmPoint:Tpoint;
begin
    //清理原来的数据
    AGV_Data:=DW_ThreeDim.Auto_Judge_OldStep.Whole_AGV_Data;
    ce:=0.3;
    for Dao := min_Dao to Max_Dao do    begin
        DW_ThreeDim.MyContourDoubleGrid[Dao][Min_Sup].SmoothData:= AGV_Data*(0.95+0.1*sin((Dao mod 40)/20*3.1415926));
        DW_ThreeDim.MyContourDoubleGrid[Dao][Max_Sup].SmoothData:= AGV_Data;
        for sup := Min_Sup to Max_Sup do  begin
            if sup > Min_Sup then
               DW_ThreeDim.MyContourDoubleGrid[min_Dao][sup].SmoothData:= AGV_Data;
            DW_ThreeDim.MyContourDoubleGrid[Max_Dao][sup].SmoothData:= AGV_Data;
            if DW_ThreeDim.MyContourDoubleGrid[Dao][Sup].ContoursideData >10 then begin
               DW_ThreeDim.MyContourDoubleGrid[Dao][Sup].SmoothData:=AGV_Data*0.95;
            end else begin
               DW_ThreeDim.MyContourDoubleGrid[Dao][Sup].SmoothData:=-1;
            end;

        end;
    end;

   DW_ThreeDim.SetProcegressBarVisual(Panel_ProcessBar,FirstPGBar,SecondPGBar,true,100,100);
   for I :=0 to  High(DW_ThreeDim.Auto_Judge_OldStep.ExSteps) do   begin
       DW_ThreeDim.StepProcegressBar(FirstPGBar,SecondPGBar,10,0);
       tmpStep:=DW_ThreeDim.Auto_Judge_OldStep.ExSteps[i];
       if tmpStep.ModifyData >=8 then   begin
          AryPt[0].pt.x:=tmpStep.OneStepInfo.MaxData_Dao;
          AryPt[0].pt.y:=tmpStep.OneStepInfo.MaxData_Sup;
          AryPt[0].DataV:=tmpStep.OneStepInfo.AGVDAta;
          //------------
          Whole_MaxValue:=max(Whole_MaxValue,tmpStep.OneStepInfo.AGVDAta);
          //------------
          for j := 0 to 7 do  begin
              SelectPoint[j].pt:=tmpStep.MyOutLinePoint[j].Point;
              SelectPoint[j].Select:=False;
              DW_ThreeDim.MyContourDoubleGrid[tmpStep.MyOutLinePoint[j].Point.x]
                    [tmpStep.MyOutLinePoint[j].Point.y].SmoothData:=
                      AGV_Data+abs((tmpStep.OneStepInfo.AGVDAta-AGV_Data)/3);;
          end;

          for Dao := tmpStep.OneStepInfo.StartDao to tmpStep.OneStepInfo.EndDao do
            for sup := tmpStep.OneStepInfo.StartSup to tmpStep.OneStepInfo.EndSup do begin
                DW_ThreeDim.StepProcegressBar(FirstPGBar,SecondPGBar,0,5);
                if DW_ThreeDim.MyContourDoubleGrid[Dao][Sup].SmoothData >0  then  continue;
                iPt.pt.X :=Dao;
                iPt.pt.Y :=Sup;
                iPt.DataV:=-1;
                if not tmpStep.IsPtInOutLine(iPt.pt) then continue;
                SetSelectPointIsFalse(SelectPoint);
                for j := 1 to 3 do begin
                   AryPt[j].pt:=SelectMinDisPoint(SelectPoint,iPt.pt);
                   AryPt[j].DataV:=AGV_Data+abs((tmpStep.OneStepInfo.AGVDAta-AGV_Data)/3);
                end;
                iPt:=Inverse_Distance_Powe(ipt,AryPt[0],AryPt[1],AryPt[2],AryPt[3]);
                if ipt.DataV > 0 then
                   DW_ThreeDim.MyContourDoubleGrid[Dao][Sup].SmoothData:=ipt.DataV;
            end;
       end;
   end;
   // 填充最小的值
   Upper_Bl:=AGV_Data*ce/(Whole_MaxValue- AGV_Data) ;
   Upper_Bl:=1;
   for Dao := min_Dao to Max_Dao do
        for sup := Min_Sup to Max_Sup do   begin
           DW_ThreeDim.StepProcegressBar(FirstPGBar,SecondPGBar,0,1);
           if DW_ThreeDim.MyContourDoubleGrid[Dao][Sup].SmoothData > AGV_Data then  begin
              DW_ThreeDim.MyContourDoubleGrid[Dao][Sup].SmoothData:=AGV_Data+
                    (DW_ThreeDim.MyContourDoubleGrid[Dao][Sup].SmoothData- AGV_Data)* Upper_Bl;
           end ;
        end;
  // 填充其他的数值
  for Dao := min_Dao to Max_Dao do
        for sup := Min_Sup to Max_Sup do   begin
            if DW_ThreeDim.MyContourDoubleGrid[Dao][Sup].SmoothData < 0 then begin
               tmPoint.X :=Dao;tmPoint.Y :=Sup;
               selectFromFourFangxiang(DW_ThreeDim.MyContourDoubleGrid,tmPoint,AGV_Data,
                      min_Dao, Max_Dao, Min_Sup, Max_Sup);
            end;
        end;
     //--------------------------------------------
  // 图形立柱
  if AGV_Data-(Whole_MaxValue- AGV_Data)*2 >1 then  begin
     DW_ThreeDim.MyContourDoubleGrid[Max_Dao][Max_Sup].SmoothData:=AGV_Data-(Whole_MaxValue- AGV_Data)*2 ;
  end else begin
     DW_ThreeDim.MyContourDoubleGrid[Max_Dao][Max_Sup].SmoothData:=1;
  end;



   loadData:=true;
   DW_ThreeDim.SetProcegressBarVisual(Panel_ProcessBar,FirstPGBar,SecondPGBar,False ,0,0);
end;

procedure TForm_ThreeGraph.TianJianStepInfo(Chart: Tchart);
var
   i,F_Count,id:integer;
   LabMark:String;
   tmpStep:TOldOneStep;
begin

    with Chart.AddSeries( TPoint3DSeries) as TPoint3DSeries do begin
       // Marks.Visible:=true;
        Marks.Font.Size:=8;
        Marks.Color :=ClYellow;
        legend.Visible :=False;
        Pointer.Style:=psArrow;
        Pointer.Color:=ClYellow;
        Pointer.Size:=15;
        LinePen.Visible :=False;
        F_Count:=0;
         for I :=0 to  High(DW_ThreeDim.Auto_Judge_OldStep.ExSteps) do   begin
           DW_ThreeDim.StepProcegressBar(FirstPGBar,SecondPGBar,10,0);
           tmpStep:=DW_ThreeDim.Auto_Judge_OldStep.ExSteps[i];
           if tmpStep.ModifyData =10 then   begin
              inc(F_Count);
              LabMark:='第['+IntTostr(F_Count)+']次预报(Q_'+IntTostr(i+1)+')';
           end else if tmpStep.ModifyData =9 then   begin
              inc(F_Count);
              LabMark:='第['+IntTostr(F_Count)+']次预报(M_'+IntTostr(i+1)+')';
           end else if tmpStep.ModifyData =8 then   begin
              inc(F_Count);
              LabMark:='第['+IntTostr(F_Count)+']次预报(E_'+IntTostr(i+1)+')';
           end;

           if tmpStep.ModifyData >=8 then begin
            id:=AddXYZ(tmpStep.OneStepInfo.MaxData_Dao,
                  tmpStep.OneStepInfo.AGVDAta*  DW_ThreeDim.ColorValue.MPaChangeKN_Xs,
                  tmpStep.OneStepInfo.MaxData_Sup) ;
               Marks.Item[id].Text.Text:=LabMark;
           end;

         end;
    end;

end;

procedure TForm_ThreeGraph.ToolButton1Click(Sender: TObject);
begin
   SavePictureDialog1.Execute ;
   LineGraphChartSaveIntoBMP(SavePictureDialog1.FileName);
end;

procedure TForm_ThreeGraph.But_ChangFillColorClick(Sender: TObject);
begin
   {psPale, psStrong, psGrayScale, psInvGray, psRainbow}
    inc(tmpIni);
    if tmpIni=1  then begin
      ThreeSeries.PaletteStyle :=psPale;
      ThreeSeries.PaletteSteps:=32;
    end else   if tmpIni=2  then begin
      ThreeSeries.PaletteStyle :=psStrong;
      ThreeSeries.PaletteSteps:=32;
    end else   if tmpIni=3  then begin
      ThreeSeries.PaletteStyle :=psGrayScale;
      ThreeSeries.PaletteSteps:=32;
    end else   if tmpIni=4  then begin
      ThreeSeries.PaletteStyle :=psInvGray;
      ThreeSeries.PaletteSteps:=32;
    end else   if tmpIni=5  then begin
      ThreeSeries.PaletteStyle :=psRainbow;
      ThreeSeries.PaletteSteps:=32;
      tmpIni:=0;
    end;
    ThreeSeries.RefreshSeries;
end;

end.
