unit UWinDateModul;

interface

uses
  Windows, SysUtils, Classes, Messages, Forms, StdCtrls, ExtCtrls,
  ComCtrls ,math,ADODB,COMobj,SQLiteTable3,ActiveX,Dialogs,StrUtils,
  IniFiles;

  const
     ExDataBase= 'RockPress';



type
 TIni = class(TObject)
    fIniReader: TiniFile;
    fpath: string;
    fIsOpen: boolean;
  public
    //得到Config.ini文件中的配置信息
    constructor Create(FileName: string );
    procedure iniClose(FileName: string );
    function iniIsOpen(FileName: string): boolean;               //是否Ini 文件被打开
    function iniGetStr(ID: string; secName: string ): string;
    function iniGetInt(ID: string; secName: string ): integer;
    function iniGetFloat(ID: string; secName: string ): Double;
    function iniSetStr(newValue: string; ID: string; secName: string): boolean;
  end;

 
  TIniObj = class(Tini)
    DataType: string;
    SrvIP: string;
    DataBaseName: string;
    UserName: String;
    PassWord: String;
    FilePath: String;
    ServerPause: integer;
    StartTime: String;
    totalNumber: integer;
    SupDTV1:Integer;
    SuPDTV2:integer;
    SupDTV3:integer;
    SupDTv4:integer;
    TimeInterval:integer;
    DataNeverDisCTime:integer;
    ThreadNumber:Integer;

  public
    procedure LoadIni;
    procedure SaveIni(sDatType,sIP,sDName,sUN,sPw,sFP,sPause,sStart,StolN,
                      sV1,sV2,Sv3,Sv4,TIV,TDec: string);
  end;


  TMyDataModule =class (TObject)
  private
    //变量
        SQLiteName:string ;//
        EXDataType:string;//外部数据库类型
        EXDataIP,ExUser,EXPassword:String;
        FReadIni:TIniObj;
  protected


  public
      //组件
        Connected:Boolean; //判断数据库连接是否成功
     // 外部数据库连接
        ExConn: TADOConnection;
        ExCommand1: TADOCommand;
        ExCommand2: TADOCommand;

        ExDataSet1: TADODataSet;
        ExDataSet2: TADODataSet;
        EXQuery:TADOQuery;
        ExADOQuery1:TADOQuery;
        //SQL数据库连接
        Maindb: TSQLiteDatabase;
        MainDBpath: string;

        // 函数与方法
        constructor Create;
        destructor Destroy;
        function initsqliteData:Boolean;  // 初始化sqllit 数据库
        function SetLinkDatabase(DName:string):Boolean; // connected sqlite
        procedure SetExDataType(Value:string);
        function SetExDBaseInfo(sIP,sUser,sPass:string):Boolean;
        function GetExDataType:String;
        //创建数据库
        function TestMySql(uDType:string):Boolean;
        function TestServer(uDType:string):Boolean;
        function CreateDatabase(uDType,IP,User,Pass,Path:string):Boolean;
        function ConnectedData(uDType,Name:string):Boolean;
        //创建数据表
        function CreateMySqlTable(xl,gzmName,bh:string):Boolean; //xl=1 代表插入基本表，xl=2 代表插入工作面的再生表   xl=3 插入带编号的数据表
        function CreateServerTable(xl,gzmName,bh:string):Boolean; //xl=1 代表插入基本表，xl=2 代表插入工作面的再生表  xl=3 插入带编号的数据表
        // control ini
        function SaveIniFile(sData, sIp,sUser, SPw,sPath:string):boolean;  // 保存 ini数据
        function ReadIniProcess(var sttime:TDateTime;Var Paused,totalNumber:integer):Boolean;  //  读取ini过程数据
        Procedure WriteIniProcess(StTime:TdateTime;Paused:integer); // 写ini过程数据
        Procedure WriteiniTotalNumber(TotalN:integer); // 写ini过程数据
        procedure ReadServerinfo(var S1, S2, S3,S4,S5: string);  //读 数据库配置
        function ReadiniSV(var V1,V2,V3,V4:Integer):Boolean;  // 读取ini中si四个数据值
        Procedure WriteiniSV(V1,V2,V3,V4:Integer);//写ini中si四个数据值
        function ReadIniTimeInterval:integer;   // 读ini计算时间间隔
        procedure WriteIniReadIniTimeInterval(Vaule:Integer); //写ini计算时间间隔
        function ReadiniDataNeverDisCTime:Integer;  //读 ini时间不间断间隔
        procedure WriteIniDAtaNeverDisCTime(Value:integer);// 写ini时间不间断间隔
        function ReadiniThreadNumber:integer;     //   读线程的数量
        procedure WriteINiThreadNumber(Value:integer); // 写线程的数量
        function ReadiniTotalNumber:integer; //读记录
        //转字符串
        //从数据库读取Unicode的中文编码，解码：
        function DecodeUtf8Str(const S:UTF8String): WideString; var lenSrc,lenDst  : Integer;

        //判断数据表的存在
        function JudgeTableIsExists(TableName:string):boolean;
        procedure InsertProcessLog(GTime:Tdatetime;ProcessType,gzmName:string;Supbh,DNumber:integer;
                  Etime:string;Succeed:Boolean;safteyIn:integer;Safteybh:integer);
        //
         function SplitString(const source, ch: string): TStringList;    //2016-5-30   截取字符串
         procedure cbolist(Combo:TComboBox;sql,str1,str2,str3:AnsiString);//2016-5-30  sqlserver或者mysql的连接combox
         procedure ComboList(Combo:TComboBox;sql,str1,str2,str3:AnsiString);//2016-5-31 sqllite读取数据

  end;

implementation

uses UWinFormDll;


{ TMyDataModule }

procedure TMyDataModule.cbolist(Combo: TComboBox; sql, str1, str2,
  str3: AnsiString);
var
    t_s1,t_s2,t_s3,S_tmp,s:ansistring;

begin

     Combo.Clear ;

     uDisposeData.ExDataSet2.CommandText:=sql;
     uDisposeData.ExDataSet2.Open ;

     while not uDisposeData.ExDataSet2.eof do
       begin
           s_tmp:='';
           if str1<>'' then
             begin
               t_s1:=Trim(uDisposeData.ExDataSet2.FieldByName(str1).AsString) ;
                //   t_s1:=   innDataModule.DecodeUtf8Str(t_s1);
               //innDataModule.DecodeUtf8Str(t_s1);
               //showmessage(s)  ;
               s_tmp:=t_s1;
                   if str1<>'xh' then
                     begin
                           combo.Tag:=strtoint(t_s1);
                     end;
             end;
           if str2<>'' then
            begin
               t_s2:=Trim(uDisposeData.ExDataSet2.FieldByName(str2).AsString) ;
             // t_s2:=  innDataModule.DecodeUtf8Str(t_s2);
               s_tmp:=s_tmp+'_'+t_s2;
            end;
           if str3<>'' then
             begin
                t_s3:=Trim(uDisposeData.ExDataSet2.FieldByName(str3).AsString) ;
           // t_s3:=  innDataModule.DecodeUtf8Str(t_s3);
               s_tmp:=s_tmp+'_'+t_s3;
               if str3<>'JingName' then
               begin
                    combo.Tag:=strtoint(t_s3);
               end;

             end;
           combo.Items.Add(s_tmp);
           uDisposeData.ExDataSet2.Next ;
       end;
   uDisposeData.ExDataSet2.Close ;
       if combo.Items.Count >0 then
           combo.ItemIndex :=0;

end;

procedure TMyDataModule.ComboList(Combo: TComboBox; sql, str1, str2,
  str3: AnsiString);
var t_s1,t_s2,t_s3,S_tmp:ansistring;
     sltb1,sltb2: TSQLIteTable;
     CTsql,wStr:string;
     TableName:string;
begin
    Combo.Clear ;
     //self.ADODataSet2.close;
     //ADODataSet2.CommandText:=sql;
     //ADODataSet2.Open ;

    // sltb1:=innDataModule.Maindb.GetTable(sql);
     sltb1:= uDisposeData.Maindb.GetTable(sql);
     while not sltb1.eof do
       begin
           s_tmp:='';
           if str1<>'' then
             begin
               t_s1:=Trim(utf8decode(sltb1.FieldByName[str1]));

               s_tmp:=t_s1;
                   if str1<>'xh' then
                     begin
                           combo.Tag:=strtoint(t_s1);
                     end;
             end;
           if str2<>'' then
            begin
               t_s2:=Trim(utf8decode(sltb1.FieldByName[str2]));

               s_tmp:=s_tmp+'_'+t_s2;
            end;
           if str3<>'' then
             begin
               t_s3:=Trim(utf8decode(sltb1.FieldByName[str3])) ;

               s_tmp:=s_tmp+'_'+t_s3;
               if str3<>'JingName' then
               begin
                    combo.Tag:=strtoint(t_s3);
               end;

             end;

           combo.Items.Add(s_tmp);

           sltb1.Next ;
       end;
    sltb1.Free ;
       if combo.Items.Count >0 then
           combo.ItemIndex :=0;
end;

function TMyDataModule.ConnectedData(uDtype, Name: string): Boolean;
var
   sConn:string;
begin
      Result:=True; Connected:=true;
       if ExConn.Connected then  ExConn.Close;


      if (uDtype= 'SQLSERVER') or(uDtype= 'SQL SERVER') then  begin
          sConn    := 'Provider=SQLOLEDB.1;Persist Security Info=True;Connect   Timeout=30 '
                    + ';Data Source='+ExDataIP
                    + ';Initial Catalog='+Name
                    + ';User ID =' +ExUser
                    + ';Password='+ ExPassword
                    + ';Packet Size='+InttoStr(4096)   //一个Integer值，一般是4096
                    + ';';
      end else if (uDtype= 'MYSQL') or (uDtype= 'MY SQL') then  begin
           sConn   :='DRIVER={MySQL ODBC 3.51 Driver}'
                    + ';SERVER='+ExDataIP
                    + ';DATABASE='+Name
                    + ';USER='+ExUser
                    + ';PASSWORD='+ExPassword
                    + ';OPTION=3'
                    + ';' ;
      end;

         EXConn.ConnectionString:= sConn; 
      try
         ExConn.Open;
         self.SaveIniFile(uDtype,ExDataIP,Name,ExUser,ExPassword);
      except
         Result:=False; Connected:=False;
      end;

end;


constructor TMyDataModule.Create;
begin
  inherited;
       CoInitialize(nil);
       ExConn:= TADOConnection.Create(nil);
       ExConn.LoginPrompt :=false;
       ExCommand1:= TADOCommand.Create(nil);
          ExCommand1.Connection:=ExConn;
       ExCommand2:=TADOCommand.Create(nil);
          ExCommand2.Connection:=ExConn;
       ExDataSet1:=TADODataSet.Create(nil);
          ExDataSet1.Connection:=ExConn;
       ExDataSet2:=TADODataSet.Create(nil);
          ExDataSet2.Connection:=ExConn;
       Exquery:=TADOQuery.Create(nil);
          Exquery.Connection:= ExConn;
       ExADOQuery1:= TADOQuery.Create(nil);
          ExADOQuery1.Connection:= ExConn;

       Connected:=false;
       //
       fReadIni:=TIniObj.Create('ServerInfo.dll');
end;


function TMyDataModule.CreateDatabase(uDType, IP, User, Pass,
  Path: string): Boolean;
var
  sql:string;
  WStr:ansiString;
begin
    Result:=false;
    wStr:='确定要创建新数据库么？老数据库中数据将完全被覆盖！'+#13#13+'建议备份后再进行创建！';
    if MessageBox(0, Pchar(wstr),'提示',MB_YESNO + MB_DEFBUTTON2+ MB_ICONQUESTION) = IDNO then exit;
    // click Yes  continue
      try
        if (uDtype= 'SQLSERVER') or(uDtype= 'SQL SERVER') then  begin
              ConnectedData(uDType,'master');
              sql:='if exists(select * from sysdatabases where name='''+ExDataBase +''') drop database '+ExDataBase;
                 ExCommand1.CommandText:=sql;

                 ExCommand1.Execute ;

              sql:= 'create database '+ ExDataBase
                   +' on (  name=''' +ExDataBase+'_Data'','  // -- 主数据文件的逻辑名称
                   +' filename= '''+path+ExDataBase +'_data.mdf'','  // -- 主数据文件的物理名称
                   +' size=10,FileGrowth=15%)'
                   +' log on (name='''+ExDataBase+'_log'','
                   +' filename= '''+path+ExDataBase +'_log.ldf'','  // -- 主数据文件的物理名称
                   +' size=10,FileGrowth=15%)';
               ExCommand1.CommandText:=sql;
               ExCommand1.Execute ;
        end else if (uDtype= 'MYSQL') or (uDtype= 'MYSQL') then  begin

            ConnectedData(uDType,'mysql');
            sql:='drop database  if exists  '+ExDataBase ;
               ExCommand1.CommandText:=sql;
               
               ExCommand1.Execute ;
             sql:=' Create database  '+ExDataBase ;
               ExCommand1.CommandText:=sql;
               ExCommand1.Execute ;
        end;
      finally
         Result:=true;
      end;
end;

//  创建 MYSql 数据表  1 代表插入基本表，2 代表插入工作面的再生表
function TMyDataModule.CreateMySQlTable(xl,gzmName,bh:string): Boolean;
var
  sltb1,sltb2: TSQLIteTable;
  CTsql,wStr,indexStr:string;
  TableName:string;
begin
    Result:=false;
    wStr:='确定要创建新数据表么？老数据表中数据将完全被覆盖！'+#13#13+'建议备份后再进行创建！';
    if xl <>'3' then
        if MessageBox(0, Pchar(wstr),'提示',MB_YESNO + MB_DEFBUTTON2+ MB_ICONQUESTION) = IDNO then exit;
    // click Yes  continue

try

     sltb1:=Maindb.GetTable('select * from createtable where ' +
                            '  used =1 and  creatleg='+xl+' order by tableid ');

     while not sltb1.EOF  do  begin
          //
           if xl='1' then  begin
              TableName:=UPPerCase(DecodeUtf8Str(sltb1.FieldByName['CreateTableName'])) ;
           end else if  xl='2' then  begin
              TableName:='D_'+gzmname+'_'+UPPerCase(DecodeUtf8Str(sltb1.FieldByName['CreateTableName'])) ;
           end else if xl='3' then begin
              TableName:='D_'+gzmname+'_'+bh+'_'+UPPerCase(DecodeUtf8Str(sltb1.FieldByName['CreateTableName'])) ;
           end;

           ExCommand1.CommandText:='drop table  if  exists '+ TableName;
           ExCommand1.Execute ;
         CTsql:='create table '+ TableName  +' ( ';

         sltb2:= Maindb.GetTable('select * from createfields '
             + ' where CreateTableid= '+sltb1.FieldByName['tableid']+ ' and fieldleg=1 ');

        // if EXDataType='' then
         indexStr:='';
           
            while not sltb2.eof do  begin
                CTsql:=CTsql+ sltb2.FieldByName['fieldname']
                      +'  '+ sltb2.FieldByName['fieldtype'] ;

                if  upperCase(sltb2.FieldByName['fieldtype'])='VARCHAR' then
                      CTsql:=CTsql+'(' +sltb2.FieldByName['length']+')';
                if sltb2.FieldByName['isNull']='1' then    CTsql:=CTsql+ ' not null  ';
                if sltb2.FieldByName['primarykey']='1' then CTsql:=CTsql+ ' primary key Auto_increment ';
                if sltb2.FieldByName['indexStr']='1' then indexStr:=indexStr+ ' index ('+sltb2.FieldByName['fieldname']+') ,';
                CTsql:=CTsql+',';
               
                
                sltb2.Next ;
            end;
            CTsql:=CTsql+indexStr;
            CTsql:=LeftStr(CTsql,length(CTsql)-1);  
            CTsql:=CTsql+')' ;
            sltb2.Free ;

            CTsql:=CTsql+' CHARACTER SET utf8 COLLATE utf8_general_ci   ';
            ExCommand1.CommandText:=CTsql;
            ExCommand1.Execute ;
        sltb1.Next ;
     end;
        sltb1.Free;

  finally
    Result:=true;
  end;
end;

//创建 Server 数据表  1 代表插入基本表，2 代表插入工作面的再生表
function TMyDataModule.CreateServerTable(xl,gzmName,bh:string): Boolean;
var
  sltb1,sltb2: TSQLIteTable;
  CTsql,wStr:string;
  TableName:string;
  SprimaryKey:string;
begin
    Result:=false;
    wStr:='确定要创建新数据表么？老数据表中数据将完全被覆盖！'+#13#13+'建议备份后再进行创建！';
    if xl <>'3' then
        if MessageBox(0, Pchar(wstr),'提示',MB_YESNO + MB_DEFBUTTON2+ MB_ICONQUESTION) = IDNO then exit;
    // click Yes  continue

try
     SprimaryKey:='';
     sltb1:=Maindb.GetTable('select * from createtable where ' +
                            '  used =1 and  creatleg='+xl);
     while not sltb1.EOF  do  begin
          //
          if xl='1' then  begin
              TableName:=DecodeUtf8Str(sltb1.FieldByName['CreateTableName']) ;
             end else if  xl='2' then  begin
              TableName:='D_'+gzmname+'_'+UPPerCase(DecodeUtf8Str(sltb1.FieldByName['CreateTableName'])) ;
           end else if xl='3' then begin
              TableName:='D_'+gzmname+'_'+bh+'_'+UPPerCase(DecodeUtf8Str(sltb1.FieldByName['CreateTableName'])) ;
           end;

          // WHERE   TABLE_NAME = '[table_name]') DROP TABLE  [table_name]
           ExCommand1.CommandText:=' IF EXISTS ( SELECT  TABLE_NAME FROM INFORMATION_SCHEMA.TABLES '+
                                   ' WHERE   TABLE_NAME ='''+TableName+''' ) DROP TABLE '+TableName ;
           //ShowMessage(ExCommand1.CommandText);
           ExCommand1.Execute ;

          CTsql:='create table '+ TableName  +' ( ';

         sltb2:= Maindb.GetTable('select * from createfields '
             + ' where CreateTableid= '+sltb1.FieldByName['tableid']+ ' and fieldleg=1 ');


            while not sltb2.eof do  begin
                CTsql:=CTsql+ sltb2.FieldByName['fieldname']
                      +'  '+ sltb2.FieldByName['fieldtype'] ;

                if  upperCase(sltb2.FieldByName['fieldtype'])='VARCHAR' then
                      CTsql:=CTsql+'(' +sltb2.FieldByName['length']+')';
                if sltb2.FieldByName['isNull']='1' then    CTsql:=CTsql+ ' not null  ';
                if sltb2.FieldByName['primarykey']='1' then  begin
                    CTsql:=CTsql+ ' IDENTITY (1,1) ';
                    SprimaryKey:= ' primary Key ('  +sltb2.FieldByName['fieldname']+')';
                end;


                CTsql:=CTsql+',';
                sltb2.Next ;
            end;
            CTsql:=LeftStr(CTsql,length(CTsql)-1);
            if SprimaryKey <>'' then CTsql :=CTsql+ SprimaryKey;

            CTsql:=CTsql+')' ;
            sltb2.Free ;

             ExCommand1.CommandText:=CTsql;
             //ShowMessage(CTsql);
             ExCommand1.Execute ;
        sltb1.Next ;
     end;
        sltb1.Free;

  finally
    Result:=true;
  end;
end;


function TMyDataModule.DecodeUtf8Str(const S: UTF8String): WideString;
var
    lenSrc,lenDst  : Integer;
begin
      lenSrc  := Length(S);
      if(lenSrc=0)then Exit;
      lenDst  := MultiByteToWideChar(CP_UTF8, 0, Pointer(S),lenSrc, nil, 0);
      SetLength(Result, lenDst);
      MultiByteToWideChar(CP_UTF8, 0, Pointer(S),lenSrc, Pointer(Result), lenDst);
end;

destructor TMyDataModule.Destroy;
begin
       Maindb.Free ;

       ExConn.Free;
       ExCommand1.Free;
       ExCommand2.Free;
       ExDataSet1.Free;
       ExDataSet2.Free;
       ExADOQuery1.free;
       fReadini.iniClose('ServerInfo.dll');
       fReadini.Free;
       
end;

function TMyDataModule.GetExDataType: String;
begin
      Result:=ExDataType;
end;

// end function

function TMyDataModule.initsqliteData: Boolean;
begin
       //判断数据库文件
         Result:=true;
          if SqliteName='' then  SqliteName := 'RockPressure.db';
          if not SetLinkDatabase(SqliteName) then  begin
             Result:=false;
          end;
end;



procedure TMyDataModule.InsertProcessLog(GTime: Tdatetime; ProcessType,GzmName: string;
  Supbh,DNumber: integer; Etime: string; Succeed:Boolean;safteyIn, Safteybh: integer);
var
   sql:string;
   Suc:string;
begin
       if Succeed then suc:='1' else suc:='0';
       
       sql:='insert into processlog (generatetime,Processtype,GzmName,supportbh,datanumber,elapsedtime,succeed,safetyinfo,safetybh )' +
            ' values ('''+ FormatDateTime( 'yyyy-mm-dd hh:nn:ss',GTime)+''',''' +
            ProcessType+ ''','''+GzmName+''',' + IntToStr(Supbh)+',' +
            IntToStr(DNumber) +',' +Etime +','+Suc+',' +
            intTostr(safteyIn )+','+ intToStr(Safteybh) +')' ;
       Excommand1.CommandText :=sql;
       Excommand1.Execute ;
end;

function TMyDataModule.JudgeTableIsExists(TableName: string): boolean;
 var
   sql:string;
begin
//       if (ExDatatype= 'MYSQL') or (ExDatatype= 'MY SQL')   then  begin
//           sql:='SELECT  id from  '+TableName +'  limit 1';
//       end  else if (ExDatatype= 'SQLSERVER') or (ExDatatype= 'SQL SERVER')   then  begin
//           sql:='Select Name from sysobjects where xtype=''u'' and name ='''+TableName +'''';
//       end;
//       try
//          ExDataSet2.Close;
//          ExDataSet2.CommandText :=sql;
//          ExDataSet2.Open ;
//          if ExDataSet2.RecordCount>0 then   Result:=true
//           else  Result:=false;
//           ExDataSet2.Close;
//       except
//          result:=false;
//          ExDataSet2.Close;
//          exit;
//       end;

      Result:=true;
end;

function TMyDataModule.ReadiniDataNeverDisCTime: Integer;
Var
  Value:integer;
begin
       if  not assigned(fReadini) then
             fReadini.Create('ServerInfo.dll') ;
      Value:=  fReadini.iniGetint('DataNeverDisCTime','Setting');;
       Result:= fReadini.iniGetint('DataNeverDisCTime','Setting');

end;

function TMyDataModule.ReadIniProcess(var sttime: TDateTime; var Paused,
  totalNumber: integer): Boolean;
var
   FSetting : TFormatSettings;
begin
      {DataType: string;
    SrvIP: string;
    DataBaseName: string;
    UserName: String;
    PassWord: String;
    FilePath: String;
    ServerPause: integer;
    StartTime: String;
    totalNumber: integer;}
    //日期格式转换
       FSetting.ShortDateFormat:='yyyy-mm-ss' ;
       FSetting.DateSeparator :='-';
       FSetting.ShortTimeFormat :='hh:nn:ss';
       FSetting.TimeSeparator :=':';
       FSetting.DecimalSeparator :='.';
    //-----

     if  not assigned(fReadini) then
             fReadini.Create('ServerInfo.dll') ;
     sttime:=StrToDateTime(fReadini.iniGetStr('StartTime','Processing'),FSetting);
     Paused:=fReadini.iniGetInt('ServerPause','Processing');
     totalNumber:=fReadini.iniGetInt('totalNumber','Processing');
     Result:=true;

end;

function TMyDataModule.ReadiniSV(var V1, V2, V3, V4: Integer): Boolean;
begin
     if  not assigned(fReadini) then
             fReadini.Create('ServerInfo.dll') ;
      V1:= fReadini.iniGetint('SupDTV1','Setting');
      V2:= fReadini.iniGetint('SuPDTV2','Setting');
      V3:= fReadini.iniGetint('SupDTV3','Setting');
      V4:= fReadini.iniGetint('SupDTV4','Setting');

     Result:=true;
end;

function TMyDataModule.ReadiniThreadNumber: integer;
begin
       if  not assigned(fReadini) then
             fReadini.Create('ServerInfo.dll') ;
      Result:= fReadini.iniGetint('ThreadNumber','Setting');
end;

function TMyDataModule.ReadIniTimeInterval: integer;
begin
      if  not assigned(fReadini) then
             fReadini.Create('ServerInfo.dll') ;
      Result:= fReadini.iniGetint('TimeInterval','Setting');

end;

function TMyDataModule.ReadiniTotalNumber: integer;
begin
      if  not assigned(fReadini) then
             fReadini.Create('ServerInfo.dll') ;
      Result:= fReadini.iniGetint('TotalNumber','Setting');
end;

procedure TMyDataModule.ReadServerinfo(var S1, S2, S3,S4,S5: string);
begin
    {DataType: string;
    SrvIP: string;
    DataBaseName: string;
    UserName: String;
    PassWord: String;
    FilePath: String;
    ServerPause: integer;
    StartTime: String;
    totalNumber: integer;}
    
     if  not assigned(fReadini) then
             fReadini.Create('ServerInfo.dll') ;
     s1:=Trim(fReadini.iniGetStr('DataType','Setting'));
     s2:=Trim(fReadini.iniGetStr('SrvIP','Setting'));
     s3:=Trim(fReadini.iniGetStr('UserName','Setting'));
     s4:=Trim(fReadini.iniGetStr('PassWord','Setting'));
     s5:=Trim(fReadini.iniGetStr('FilePath','Setting'));


end;

function TMyDataModule.SaveIniFile(sData, sIp,sUser, SPw,sPath:string): boolean;
begin
     Result:=true;
     if  not assigned(fReadini) then
             fReadini.Create('ServerInfo.dll') ;
     fReadini.iniSetStr(trim(sData), 'DataType','Setting');
     fReadini.iniSetStr(trim(sIP), 'SrvIP','Setting');
     fReadini.iniSetStr(trim(sUser), 'UserName','Setting');
     fReadini.iniSetStr(trim(sPw), 'PassWord','Setting');
     fReadini.iniSetStr(trim(sPath), 'FilePath','Setting');
     fReadini.iniSetStr(trim(ExDataBase), 'DataBaseName','Setting');


end;

procedure TMyDataModule.SetExDataType(Value: string);
begin
     ExDataType:=Value;
end;

function TMyDataModule.SetExDBaseInfo(sIP, sUser, sPass: string): Boolean;
begin
     EXDataIP:=sIP;
     ExUser:=sUser;
     EXPassword:=sPass;
end;

function TMyDataModule.SetLinkDatabase(DName: string): Boolean;
var
   i:integer;
   dPath:String;
begin
         Result:=true;
         i:=pos('.', DName);
         if i>0  then begin
               MainDBPath :=dllpath +DName;
         end else begin
               MainDBPath :=dllpath +DName+ '.db';
         end;
        // ShowMessage(MainDBPath);
         if not FileExists(MainDBPath) then begin
                Result:=false;
                exit;
          end;
        Maindb := TSQLiteDatabase.Create(MainDBPath);

end;


function TMyDataModule.SplitString(const source, ch: string): TStringList;
var
  temp, t2: string;
  i: integer;
begin
  result := TStringList.Create;
  temp := source;
  i := pos(ch, source);
  while i <> 0 do
  begin
    t2 := copy(temp, 0, i - 1);
    if (t2 <> '') then
      result.Add(t2);
    delete(temp, 1, i - 1 + Length(ch));
    i := pos(ch, temp);
  end;
  result.Add(temp);
end;

function TMyDataModule.TestMySql(uDType: string): Boolean;
begin
     Result:=false;
     if ConnectedData(uDType,'MySql') then Result:=true;

end;

function TMyDataModule.TestServer(uDType: string): Boolean;
begin
      Result:=false;
     if ConnectedData(uDType,'Master') then Result:=true;
end;

procedure TMyDataModule.WriteIniDAtaNeverDisCTime(Value: integer);
begin
     if  not  assigned(fReadini) then
             fReadini.Create('ServerInfo.dll') ;

           fReadini.iniSetStr(trim(IntToStr(Value)), 'DataNeverDisCTime','setting');
end;

procedure TMyDataModule.WriteIniProcess(StTime: TdateTime; Paused:integer);
begin
      if  not assigned(fReadini) then
             fReadini.Create('ServerInfo.dll') ;
        if( StTime > 1000)  then
           fReadini.iniSetStr(FormatDateTime('yyyy-mm-dd hh:nn:ss',StTime),'StartTime','Processing');
       fReadini.iniSetStr(Trim(IntToStr(Paused)),'ServerPause','Processing');

end;

procedure TMyDataModule.WriteIniReadIniTimeInterval(Vaule: Integer);
begin
        if  not assigned(fReadini) then
             fReadini.Create('ServerInfo.dll') ;

       fReadini.iniSetStr(trim(InttoStr(Vaule)), 'TimeInterval','setting');

end;

procedure TMyDataModule.WriteiniSV(V1, V2, V3, V4: Integer);
begin
   if  not assigned(fReadini) then
             fReadini.Create('ServerInfo.dll') ;
    fReadini.iniSetStr(trim(intToStr(V1)), 'SupDTV1','Setting');
    fReadini.iniSetStr(trim(inttostr(V2)), 'SupDTV2','setting');
    fReadini.iniSetStr(trim(inttostr(V3)), 'SupDTV3','setting');
    fReadini.iniSetStr(trim(inttostr(V4)), 'SupDTV4','setting');

end;

procedure TMyDataModule.WriteINiThreadNumber(Value: integer);
begin
      if  not  assigned(fReadini) then
             fReadini.Create('ServerInfo.dll') ;

           fReadini.iniSetStr(trim(IntToStr(Value)), 'ThreadNumber','setting');
end;

procedure TMyDataModule.WriteiniTotalNumber(TotalN: integer);
begin
    if  not assigned(fReadini) then
             fReadini.Create('ServerInfo.dll') ;
       fReadini.iniSetStr(Trim(IntToStr(TotalN)),'TotalNumber','Processing');
end;

//
constructor TIni.Create(FileName: string);
begin
  try
    fpath := dllPath;
    fIniReader := TiniFile.Create(fpath + FileName);
    fIsOpen := true;
  except
    fIsOpen := false;
  end;
end;


procedure TIni.iniClose(FileName: string);
begin
  finiReader.Free;
  fIsOpen := false;
end;

function TIni.iniIsOpen(FileName: string ): boolean;
begin
  if finiReader.FileName = FileName then
    Result := fIsOpen
  else
    Result := false;
end;

function TIni.iniGetStr(ID: string; secName: string ): string;
begin
  Result := finiReader.ReadString(secName, ID, '0');
end;

function TIni.iniGetInt(ID: string; secName: string ): integer;
begin
  Result := strtoint(finiReader.ReadString(secName, ID, '0'));
end;

function TIni.iniGetFloat(ID: string; secName: string): Double;
begin
  Result := strtoFloat(finiReader.ReadString(secName, ID, '0'));
end;

function TIni.iniSetStr(newValue: string; ID: string; secName: string ): boolean;
begin
  try
    finiReader.WriteString(secName, ID, NewValue);
    Result := true;
  except
    Result := false;
  end;
end;

/////////////////
// 创建Ini配置对象

procedure TIniObj.LoadIni;
begin
  try
  {
    DataType: string;
    SrvIP: string;
    DataBaseName: string;
    UserName: String;
    PassWord: String;
    FilePath: String;
    ServerPause: integer;
    StartTime: String;
    totalNumber: integer;
    SupDTV1:Integer;
    SuPDTV2:integer;
    SupDTV3:integer;
    SupDTv4:integer;
    TimeInterval:integer;
    DataNeverDisCTime:integer;
    }
    DataType:= iniGetStr('DataType','Setting');
    SrvIP:= iniGetStr('SrvIP','Setting');
    DataBaseName:= iniGetStr('DataBaseName','Setting');
    UserName:= iniGetStr('UserName','Setting');
    PassWord:= iniGetStr('PassWord','Setting');
    FilePath:= iniGetStr('FilePath','Setting');
    SupDTV1:= iniGetint('SupDTV1','Setting');
    SuPDTV2:= iniGetint('SuPDTV2','Setting');
    SupDTV3:= iniGetint('SupDTV3','Setting');
    SupDTV4:= iniGetint('SupDTV4','Setting');
    TimeInterval:= iniGetint('TimeInterval','Setting');
    DataNeverDisCTime:= iniGetint('DataNeverDisCTime','Setting');

    ServerPause:= iniGetint('Port','Processing');
    StartTime:= iniGetStr('StartTime','Processing');
    totalNumber:= iniGetint('totalNumber','Processing');

  except
    on E: exception do
    begin
      //
    end;
  end;
end;

procedure TIniObj. SaveIni(sDatType,sIP,sDName,sUN,sPw,sFP,sPause,sStart,StolN,
                      sV1,sV2,Sv3,Sv4,TIV,TDec: string);
begin
  try
   {
    DataType: string;
    SrvIP: string;
    DataBaseName: string;
    UserName: String;
    PassWord: String;
    FilePath: String;
    ServerPause: integer;
    StartTime: String;
    totalNumber: integer;
    SupDTV1:Integer;
    SuPDTV2:integer;
    SupDTV3:integer;
    SupDTv4:integer;
    TimeInterval:integer;
    DataNeverDisCTime:integer;
    }

    iniSetStr(trim(sDatType), 'DataType','Setting');
    iniSetStr(trim(sIP), 'SrvIP','Setting');
    iniSetStr(trim(sDName), 'DataBaseName','Setting');
    iniSetStr(trim(sUN), 'UserName','Setting');
    iniSetStr(trim(sPw), 'PassWord','Setting');
    iniSetStr(trim(sFP), 'FilePath','Setting');
    iniSetStr(trim(sV1), 'SupDTV1','Setting');
    iniSetStr(trim(sV2), 'SupDTV2','setting');
    iniSetStr(trim(sV3), 'SupDTV3','setting');
    iniSetStr(trim(sV4), 'SupDTV4','setting');
    iniSetStr(trim(TIV), 'TimeInterval','setting');
    iniSetStr(trim(TDec), 'DataNeverDisCTime','setting');


    iniSetStr(trim(sPause), 'ServerPause','Processing');
    iniSetStr(trim(sStart), 'StartTime','Processing');
    iniSetStr(trim(StolN), 'totalNumber','Processing');

  except
  end;
end;

end.  // end unit
