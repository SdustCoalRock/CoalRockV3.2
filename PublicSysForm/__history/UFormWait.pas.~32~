unit UFormWait;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.StdCtrls, Vcl.Imaging.pngimage,
  Vcl.ExtCtrls, Vcl.ComCtrls,uDrawGraphClass,UReaddataThread;

type
  TFormWait = class(TForm)
    Image1: TImage;
    WaitLabel: TLabel;
    ProgressBar1: TProgressBar;
    Timer1: TTimer;
    procedure FormCloseQuery(Sender: TObject; var CanClose: Boolean);
    procedure Timer1Timer(Sender: TObject);
  private
    { Private declarations }

  public
    { Public declarations }
    DrawGzh:TDrawGrap;
    procedure DlThreadTerminate(Sender: TObject);
  end;
function CreateFromWait(AHandle:THandle;iDw:TDrawGrap;Flag:integer):THandle;stdcall;
procedure CloseFromWait; stdcall;
function IsExsitReadThread(ClassName:String):Boolean;stdcall;

var
  FormWait: TFormWait;
  ReadThred:TReadDataThread;

implementation

{$R *.dfm}


procedure CloseFromWait;stdcall;
begin
    if Assigned(FormWait) then
       FormWait.Close ;

end;

function IsExsitReadThread(ClassName:String):Boolean; stdcall;
var
    exitCode: DWord;
begin
     if ClassName='ReadThred' then  begin
       if Assigned(ReadThred) then
          GetExitCodeThread(ReadThred.Handle, exitCode);

     end;

       if exitCode = STILL_ACTIVE then begin
          Result:=True;
       end else begin
          Result:=False;
       end;
 end;

function CreateFromWait(AHandle:THandle;iDw:TDrawGrap;Flag:integer):THandle;stdcall;
{

  Single 0 正常页面  1 全屏页面
}

begin
        if Assigned(FormWait) then  FreeAndNil(FormWait);
        Application.Handle :=AHandle;
        FormWait:=TFormWait.Create(nil);
        FormWait.DrawGzh:= iDw;
        if Flag=1 then   begin
           //FormWait.Timer1.Enabled :=true;
           ReadThred:=TReadDataThread.Create(true);
           ReadThred.FreeOnTerminate:=True;
           ReadThred.OnTerminate := FormWait.DlThreadTerminate;
           ReadThred.Start ;
        end;

         try
           with FormWait do begin
               ParentWindow:=Ahandle;
               Show;
               Result:=FormWait.Handle ;//函数值
          end ;
        except
           FreeAndNil(FormWait);
        end;

end;

procedure TFormWait.DlThreadTerminate(Sender: TObject);
begin
   Close;
end;

procedure TFormWait.FormCloseQuery(Sender: TObject; var CanClose: Boolean);
begin
     if Assigned(FormWait) then
        freeAndNil(FormWait);
end;

procedure TFormWait.Timer1Timer(Sender: TObject);
begin
//     ProgressBar1.StepIt ;
//     if not DrawGzh.ReadThreadBoolean then
//        if Assigned(ReadThred) then  begin
//          // ReadThred.Terminate;
//           Timer1.Enabled :=False;
//           //Close;
//        end;



end;

end.
