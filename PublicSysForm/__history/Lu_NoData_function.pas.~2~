//<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
//<<      文件名：Lu_base_function.pas
//<<      lule使用的个人Delphi文件                            <<
//<<      该文件主要记录了个人函数                   <<
//<<      创建日期：2011.8.12                                   <<
//<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

unit Lu_NoData_function;

interface
 //===============
 uses
  Windows, SysUtils, Classes, Messages, Controls, Forms, StdCtrls, ExtCtrls,
  ComCtrls ,math,Grids,WordXP,COMobj,StrUtils,Vcl.Graphics;

 //---定义一个多维字符数组的类，便于分割函数
 type Str_DT_array=array of widestring;
 //定义点的类
 type

  PMyRec = ^TMyRec;
     TMyRec = record
     BName: String;
     DName: String;
     XHeight:String;
   end;
  TMyPoint = packed record
    X : double;
    Y : double;
  end;

 //============
 //---声明函数
 //-----字符串分割函数        //第一个为 待分割的字符串，第二个为分割字符，第三个为数组下标
 function split(s: string; dot: char; out ret:Integer): Str_DT_array;
 //-----字符转换数值函数（主要解决空字符串的问题）
 function StrToDouble_Lu(s:widestring):double;
 function StrToInt_lu(s:widestring):Integer;
 //---------
 //---------计算初次来压步距的函数
 function FirstStep(mc,ms,qs,rs,qj:double):double;  //mc随动层，ms支托层厚度 qs 支托层抗拉强度, rs 支托层容重 ，qj倾角
 function NextStep(c,i,mc,ms,qs,rs,qj:double):double ;//c 上一次的步距，i第几次，
 //判断最大值与最小值
 function Select_max(a1,a2,a3,a4:double):double;
 function select_min(a1,a2,a3,a4:double):double;
 //填充ComboBox
 function FullComBox(ComBox:TComboBox;Adodataset:TADODataSet;StrSql,Zd1,Zd2:AnsiString):Wordbool;stdcall;
 //
 function MySQlFillComBox(MySQlDataSet:TMyDataSet ;Combo: TComboBox; sql, str1, str2,str3: AnsiString):WordBool;stdcall;
 //
 function IsPtInPoly(ALon, ALat: double; APoints: array of TPoint): Boolean;
 function StringGridtoExcel(atitle: string; Astringgrid: Tstringgrid; Afontsize: integer):String;stdcall;
 function FindPointY(X,Y:Integer;t_List:TStringList;Leixing:integer):Integer;stdcall;
 //样条曲线
 function Lu_spline(Px,Py:array of double;Num:integer; VAR lux,luy:array of double;var L_n:integer):Boolean;stdcall;

 //汉字实现 UTF8String  to WideString 的转换
 function DecodeUtf8Str(const S:UTF8String): WideString; var lenSrc,lenDst  : Integer;
 // 一个用于书写错误记录的函数
 procedure MY_WriteLog(const DLL_path,data:Ansistring; FFM : Ansistring='FFQ' );
 // 获取模块的路径
 function Get_MyModulePath:WideString;
 //旋转打印字体
 procedure CanvasRotatedText(Canvas:TCanVas;px,py:integer;FontName:TFontName;FontSize:integer;Angle:integer;
           FontColor:TColor;StrOut:String);

var
   FsyncSQL:Trtlcriticalsection; // 定义一个异构化空间 ,用于其他函数调用
   MySQLTableNameList       :TStringlist;
implementation
 // =========================================================================================
 //旋转打印字体
procedure CanvasRotatedText(Canvas:TCanVas;px,py:integer;FontName:TFontName;FontSize:integer;
                      Angle:integer;FontColor:TColor;StrOut:String);
var
  lf:TLogFont;
  tf:TFont;
begin
      with Canvas do begin
              Font.Name :=FontName;
              Font.Size :=FontSize;
              Font.Color:=FontColor;
              tf:=TFont.Create ;
              tf.Assign(Font);
              GetObject(tf.Handle,sizeof(lf),@lf);
              lf.lfEscapement :=Angle*10;
              lf.lfOrientation :=Angle*10;
              tf.Handle :=CreateFontIndirect(lf);
              Font.Assign(tf);
              tf.Free ;

              textout(px,py,StrOut );
      end;
end;
//--------------------------
function MySQlFillComBox(MySQlDataSet:TMyDataSet ;Combo: TComboBox; sql, str1, str2,str3: AnsiString):WordBool;stdcall;
var
    t_s1,t_s2,t_s3,S_tmp,s:ansistring;

begin
     MySQlDataSet.Close;
     Combo.Clear ;
     s_tmp:='0_All';
     combo.Items.Add(s_tmp);
     MySQlDataSet.CommandText:=sql;
     if MySQlDataSet.Open  then
       while not MySQlDataSet.eof do
       begin
           s_tmp:='';
          if str1<>'' then   begin
               t_s1:=Trim(MySQlDataSet.FieldByName(str1).AsString) ;
               s_tmp:=t_s1;
             end;

          if str2<>'' then  begin
               t_s2:=Trim(MySQlDataSet.FieldByName(str2).AsString) ;
               s_tmp:=s_tmp+'_'+t_s2;
           end;

           if str3<>'' then   begin
                t_s3:=Trim(MySQlDataSet.FieldByName(str3).AsString) ;
                s_tmp:=s_tmp+'_'+t_s3;

           end;
           combo.Items.Add(s_tmp);
           MySQlDataSet.Next ;
       end;
   MySQlDataSet.Close ;

       if combo.Items.Count >0 then
          combo.ItemIndex :=0;

 end;

 //---------------------------------------------------------------------------------------------
function Get_MyModulePath:WideString;
var
   ModuleName,dllPath:WideString;
   i:integer;
begin
          SetLength(ModuleName, 255);
          GetModuleFileName(HInstance, PwideChar(ModuleName), Length(ModuleName));
          dllPath:=Trim(PwideChar(ModuleName)) ;
          i:=Pos('\',ReverseString(dllPath));

          dllPath:=Copy(dllPath,1,Length(dllPath)-i+1);
          Result:=dllPath;
end;

procedure MY_WriteLog(const DLL_path,data:Ansistring; FFM : Ansistring='FFQ' );
var
  fileName,textString:Ansistring;
  DirName:Ansistring;
  hFile,logFile:integer;
begin
   DirName:=DLL_path+'\Err\'+FormatDateTime('yyyy-mm-dd',Now())+'\';
    if not DirectoryExists(DirName) then begin
       ForceDirectories(DirName);
    end;
   fileName:=Ansistring(FormatDateTime('yyyy-mm-dd',Now())) + FFM +'.txt';
   fileName:=DirName+fileName;
   if not(FileExists(fileName)) then begin
       hFile:=FileCreate(fileName,fmOutput);
       FileClose(hFile);
   end;
   logFile:=FileOpen(filename,fmOpenwrite or fmShareDenyWrite);
   FileSeek(logfile,0,2);
   textString:=formatdateTime('hh:mm:ss:zzz',Now())+'  ' +data + #13 +#10 ;
   fileWrite(logFile,Pchar(textString)^,length(textString));
   fileclose(logfile);

end;
  //汉字实现 UTF8String  to WideString 的转换
 function DecodeUtf8Str(const S:UTF8String): WideString; var lenSrc,lenDst  : Integer;
 begin
   lenSrc  := Length(S);
   if(lenSrc=0)then Exit;
      lenDst  := MultiByteToWideChar(CP_UTF8, 0, Pointer(S),lenSrc, nil, 0);
      SetLength(Result, lenDst);
      MultiByteToWideChar(CP_UTF8, 0, Pointer(S),lenSrc, Pointer(Result), lenDst);
 end;

 //=======================
 {*------------------------------------------------------------------------------
  样条曲线
  @param PX    传入 X 坐标集合
  @param PY   传入 Y 坐标集合
  @param Num  传入数据量
  @param LuX   传出 X  坐标集合
  @param LuY   传出 Y 坐标集合
  @param L_N   传出 数据量
  @return  成功

  注意： 传入数据的个数 许小于 60个，一般30个以下 最好
  传入数据的下标 为 0- Num-1
  传出 数据的下标 为 0- Lu_n -1
 ------------------------------------------------------------------------------*  }
function Lu_spline(Px,Py:array of double;Num:integer; VAR lux,luy:array of double;var L_n:integer):Boolean;stdcall;
var
    fx,fy:array [0..300] of double;  //
    l,a,d:array [0..100] of double;  //
    cx,cy,qx,qy,r,vx,vy : array [0..100] of double; //
    i,j,m :integer;
    k,t,t1,t2,t3,l2,l3,p1x,p1y,p2x,p2y,by,bx:double;
    x1,y1,c1,c2,u: double;
    ppx,ppy:double;
    closed:Wordbool;
    PNum:Integer;
begin

     l_n:=0;
     if Num >=  58 then begin
        result:=false;
        exit;
     end else if Num=1  then begin
        l_n:=0;
        result:=false;
        exit;
     end;
     for I := Num downto 1 do begin
         px[I]:=px[I-1];
         py[I]:=py[I-1];
     end;

     PNum:=Num;

     if pNum <6 then   begin
         m:=30;
     end else if  pNum <10 then begin
         m:=20;
     end else if  pNum <30 then begin
         m:=10;
     end else begin
         m:=5;
     end;

     closed:=false;

     if (px[1]=px[pnum])  and (py[1]=py[pnum])then   begin
         px[0]:=px[pNum-1];  py[0]:=py[pNum-1];

         pNum:=pNum+1;
         px[pNum]:=Px[2]; py[pNum]:=Py[2];
         pNum:=pNum+1;
         for I := pNum downto 1 do  begin
            px[i]:=px[i-1];  py[i]:=py[i-1];
         end;

         closed:=true;
     end;

     for I := 1 to PNum-1 do  begin
        x1:=px[i+1]-px[i]; y1:=py[i+1]-py[i];
        l[i]:=sqrt(x1*x1+y1*y1);
        if l[i]=0 then  l[i]:=1;

     end;

     for I := 2 to pNum-1 do   begin
       a[i]:=l[i]/(l[i]+l[i-1]);
       d[i]:=1-a[i];
       c1:=a[i]/l[i-1];
       c2:=d[i]/l[i];
       cx[i]:=3*(c1*(px[i]-px[i-1])+c2*(px[i+1]-px[i]));
       cy[i]:=3*(c1*(py[i]-py[i-1])+c2*(py[i+1]-py[i]));
     end;

     a[1]:=-1;d[1]:=2;a[pNum]:=2;d[pNum]:=-1;

     cx[1]:=4*(px[2]-px[1])/l[1];
     cy[1]:=4*(py[2]-py[1])/l[1];

     cx[pNum]:=4*(px[pNum]-px[pNum-1])/l[pNum-1];
     cy[pNum]:=4*(py[pNum]-py[pNum-1])/l[pNum-1];

     qx[0]:=0;r[0]:=0;qy[0]:=0;
    
     for I := 1 to pNum - 1 do   begin
        u:=a[i]*r[i-1]+2;
        if u=0 then  u:=1;
        qx[i]:=(cx[i]-a[i]*qx[i-1])/u;
        qy[i]:=(cy[i]-a[i]*qy[i-1])/u;
        r[i]:=-d[i]/u;

     end;

     u:=a[pNum]*r[pNum-1]+2;
     if u=0 then u:=1;
     vx[pNum]:=(Cx[pNum]-a[pNum]*qx[pNum-1])/u;
     Vy[pNum]:=(CY[pNum]-a[pNum]*qY[pNum-1])/u;

     for i:=pNum-1  downto 1 do    begin
         Vx[i]:=qx[i]+r[i]*vx[i+1];
         Vy[i]:=qy[i]+r[i]*vy[i+1];
     end;
     //L_n:=0 ;    Lux 下标从 0 开始
     if Closed then   begin
         Lux[L_n]:=Px[2];
         Luy[L_n]:=Py[2];
     end else begin
         Lux[L_n]:=Px[1];
         Luy[L_n]:=Py[1];
     end;

     for i :=1 to pNum- 1 do  begin
        ppx:=Px[i+1]-Px[i];
         ppy:=Py[i+1]-Py[i];
        l2:=l[i]*l[i];
        l3:=l2*l[i];
        p1x:=3*ppx/l2-(vx[i+1]+2*vx[i])/l[i];
        p2x:=-2*ppx/l3+(vx[i+1]+vx[i])/l2;

        p1y:=3*ppy/l2-(vy[i+1]+2*vy[i])/l[i];
        p2y:=-2*ppy/l3+(vy[i+1]+vy[i])/l2;

        k:=l[i]/m;

        if closed then    begin
           if (i<>1) and (i<>pNum-1)  then begin
                for j:= 1 to  m do  begin
                    t:=k*j;
                    t2:=t*t;
                    t3:=t2*t;
                    fx[j]:=px[i]+vx[i]*t+p1x*t2+p2x*t3;
                    fy[j]:=py[i]+vy[i]*t+p1y*t2+p2y*t3;

                    l_n:=l_n+1;
                     Lux[L_n]:=fx[j];
                     Luy[L_n]:=fy[j];

                end;  //end for

           end;

        end else begin // end else if closed
                for j:= 1 to  m do  begin
                    t:=k*j;
                    t2:=t*t;
                    t3:=t2*t;
                    fx[j]:=px[i]+vx[i]*t+p1x*t2+p2x*t3;
                    fy[j]:=py[i]+vy[i]*t+p1y*t2+p2y*t3;

                    l_n:=l_n+1;
                     Lux[L_n]:=fx[j];
                     Luy[L_n]:=fy[j];
                end;  //end for
        end;  //end if closed
     end;  //end for

     if closed then  begin
        for I :=2  to pNum-1 do     begin

            px[i-1]:=px[i];
            py[i-1]:=py[i];
        end; //end for
        pNum:=pNum-2;
     end;
     l_n:=l_n+1;  // 数据多一个， 下标 从 0 开始 到 lu_n
     result:=true;
end;


 {*------------------------------------------------------------------------------
  判断指给定的点在给定的字符串内 Y的位置
  @param X   指定点的X
  @param Y   指定点的纬度 Y
  @param t_List  指定 坐标集合的
  @return Y 落在范围内 False 不在范围内  返回Y的值
------------------------------------------------------------------------------*  }
 function FindPointY(X,Y:Integer;t_List:TStringList;Leixing:integer):Integer;stdcall;
 var
   I,t,max,min,count1,count2 ,X_1,Y_1:integer;
   temp1,temp2 :Str_Dt_array;
   while_T:Boolean;
 begin
      if t_List.Count<1  then  begin
        result:=Y;
        exit;
      end;

      max:=t_List.Count - 1;
      Min:=0;
      while_T:=true;
      t:=trunc((max+min)/2);

      while while_T do  begin
          temp1:=split(t_list[t],',',Count1);
           X_1:=StrToInt(temp1[0]);
           if X_1<10 then begin
              result:=Y;
              while_T:=false;
              exit;
           end;
          if X_1 < X then begin
               min:=t;
           end else if X_1 = X then begin
               Min:=t;
               Max:=t+1;
           end else begin
               Max:=t;
           end; 
           if max-min <2 then   begin
              while_T:=false;
           end  else begin
              t:=trunc((max+min)/2);
           end;
      end;  // end while

         temp1:=split(t_list[min],',',Count1);
         temp2:=split(t_list[Max],',',Count1);

         Y_1:=StrToInt(temp2[1])+ trunc((StrToInt(temp2[0])-X)*(StrToInt(temp1[1])-StrToInt(temp2[1]))/(StrToInt(temp2[0])-StrToInt(temp1[0])));
         if Y < y_1 then   begin
            if leixing=1 then begin
               result:=Y_1;
            end else begin
               result:=Y;
            end; 
         end else begin
             result:=Y_1;
         end;

 end;   //end  function FindPointY
 //============
 {*------------------------------------------------------------------------------
  判断指定的经纬度坐标点是否落在指定的多边形区域内
  @param ALon   指定点的经度
  @param ALat   指定点的纬度
  @param APoints   指定多边形区域各个节点坐标
  @return True 落在范围内 False 不在范围内
------------------------------------------------------------------------------*}
function IsPtInPoly(ALon, ALat: double; APoints: array of TPoint): Boolean;
var
  iSum, iCount, iIndex: Integer;
  dLon1, dLon2, dLat1, dLat2, dLon: double;
begin
  Result := False;
  if (Length(APoints) < 3) then
  begin
    Result := False;
    Exit;
  end;
  iSum := 0;
  iCount := Length(APoints);
  for iIndex :=0 to iCount - 1 do
  begin
    if (iIndex = iCount - 1) then
    begin
      dLon1 := APoints[iIndex].X;
      dLat1 := APoints[iIndex].Y;
      dLon2 := APoints[0].X;
      dLat2 := APoints[0].Y;
    end
    else
    begin
      dLon1 := APoints[iIndex].X;
      dLat1 := APoints[iIndex].Y;
      dLon2 := APoints[iIndex + 1].X;
      dLat2 := APoints[iIndex + 1].Y;
    end;
    if ((ALat >= dLat1) and (ALat < dLat2)) or ((ALat>=dLat2) and (ALat < dLat1)) then
    begin
      if (abs(dLat1 - dLat2) > 0) then
      begin
        dLon := dLon1 - ((dLon1 -dLon2) * (dLat1 -ALat)) / (dLat1 - dLat2);
        if (dLon < ALon) then
          Inc(iSum);
      end;
    end;

  end;
  if (iSum mod 2 <> 0) then
    Result := True;
end;
//---------计算初次来压步距的函数
 function FirstStep(mc,ms,qs,rs,qj:double):double;  //mc随动层，ms支托层厚度 qs 支托层抗拉强度, rs 支托层容重 ，qj倾角
   var
     D_temp :double;
  begin
     D_temp:=sqrt((2.0*ms*ms*qs*1000)/((ms+mc)*rs*cos(qj/180.0*3.14159)));
     Result:=D_temp;
  end;
  //计算周期来压步距
 function NextStep(c,i,mc,ms,qs,rs,qj:double):double ;//c 上一次的步距，i第几次，
    begin
       if i=0 then
         begin
            Result:=-0.25*c+0.5*sqrt(0.25*c*c+1000*4*ms*ms*qs/(3*(ms+mc)*rs*cos(qj/180.0*3.14159))) ;
         end
       else
         begin
            Result:=-0.5*c+0.5*sqrt(c*c+1000*4*ms*ms*qs/(3*(ms+mc)*rs*cos(qj/180.0*3.14159))) ;
       end;
    end;
//-----字符串分割函数
//第一个为 待分割的字符串，第二个为分割字符，第三个为数组下标
 function split(s: string; dot: char; out ret:integer): Str_DT_array;
  var
       str:Str_DT_array;
       i,j:integer;
       S1:string;
  begin
     //  i:=1;
       j:=0;
   
      S1:=s;
        //-----------
        while Pos(dot, S1) > 0 do
         begin
             i:=pos(dot,s1)+1;
             s1[i-1] := chr(ord(dot)+1);
             j:=j+1;
         end;
       //------------
       ret:=j+1;
       SetLength(str,ret);
       i:=1;
       j:=0;

     
      while Pos(dot, s) > 0 do
       begin
          str[j]:=copy(s,i,pos(dot,s)-i);
          i:=pos(dot,s)+1;
          s[i-1] := chr(ord(dot)+1);
          j:=j+1;
      end;
       str[j]:=copy(s,i,strlen(PWideChar(s))-i+1);
       result:=str;
   end;
// --------字符串转换函数，主要解决空字符串报错的问题
function StrToDouble_Lu(s:widestring):double;
    begin
       try
            if length(trim(s))=0 then
                 begin
                  Result:=0.0;
                 end
            else
                 begin
                  Result:=strtofloat(trim(s));
                 end;
       except
                Result:=0.0;
       end;
 end;

function StrToInt_lu(s:widestring):Integer;
   begin
       try
         if length(trim(s))=0 then
                 begin
                  Result:=0;
                 end
            else
                 begin
                  Result:=strtoint(trim(s));
                end;
       except
                 Result:=0;
       end;
  end;
 //判断最大值与最小值
 function Select_max(a1,a2,a3,a4:double):double;     //最大值
    var
      b  :array[0..3] of double;
       i :integer;
   begin
      b[0]:=a1;b[1]:=a2;b[2]:=a3;b[3]:=a4;
       Result:=b[0];
       for I := 1 to 3 do
          begin
             if b[i]>Result then
                  Result:=b[i];
          end;

   end;
 function select_min(a1,a2,a3,a4:double):double;   //最小值
   var
       b  :array[0..3] of double;
       i :integer;
   begin
      b[0]:=a1;b[1]:=a2;b[2]:=a3;b[3]:=a4;
       Result:=b[0];
       for I := 1 to 3 do
          begin
             if b[i]<Result then
                  Result:=b[i];
          end;

   end;  //最大与最小结束标记
  

function StringGridtoExcel(atitle: string; Astringgrid: Tstringgrid; Afontsize: integer):String;stdcall;
var
     xlapp, xlsheet: variant;
     row, CCC, nnn, jjj: integer;
     s_out:String;
begin  
  try
    xlapp := createoleobject('excel.application');
  except
    s_out:='not found excel in your system, so can not create file!';
    exit;   
  end;   
  try
    ccc := Astringgrid.ColCount;

    xlapp.workbooks.add; //添加新工作簿
    xlapp.visible := false;   
    xlsheet := xlapp.activesheet;   
    xlapp.activewindow.windowstate := 2;   
    xlapp.range[xlsheet.cells[1, 1], xlsheet.cells[1, ccc]].MERGE;   
    xlsheet.cells[1, 1].value := Atitle; //页头第一行；   
    xlsheet.cells[1, 1].HorizontalAlignment := -4108;   
  
    row := 2;   
    for jjj := 0 to Astringgrid.RowCount - 1 do  
    begin  
      for nnn := 1 to ccc do  
        xlsheet.cells[row, nnn] := trim(Astringgrid.Cells[nnn - 1, row - 2]);   
      xlsheet.rows[row].RowHeight := 18;   
      inc(row);   
    end;   
  
    xlapp.visible := true;   
        //格式调整   
  
    xlapp.range[xlsheet.cells[row, 1], xlsheet.cells[row, 13]].WrapText := True;   
    xlapp.range[xlsheet.cells[row, 1], xlsheet.cells[row, 13]].HorizontalAlignment := -4108;   
  
    xlsheet.pagesetup.headerMargin := 1 / 0.035; //页眉到顶端边距1cm   
    xlsheet.pagesetup.footerMargin := 0.6 / 0.035; //页脚到底端边距1cm   
    xlsheet.pagesetup.topMargin := 1 / 0.035; //顶边距1cm   
    XLSHEET.pagesetup.bottomMargin := 1.3 / 0.035; //底边距1cm   
    xlsheet.pagesetup.leftMargin := 0.5 / 0.035; //左边距1cm   
    xlsheet.pagesetup.rightMargin := 0.5 / 0.035; //右边距1cm   
  //  xlsheet.pagesetup.leftfooter := '制表: ' + Puboptername;   
    xlsheet.pagesetup.centerfooter := ''; //页脚   
    xlsheet.pagesetup.rightfooter := '第&P页/共&N页';   
    xlsheet.pagesetup.leftHeader := '';   
    xlsheet.pagesetup.orientation := 1; //横向   
    xlsheet.pagesetup.printtitlerows := '$1:$1';   
    xlsheet.rows[1].font.name := '宋体'; //设置第一行字体属性   
    xlsheet.rows[1].font.bold := true;   
    xlsheet.rows[1].font.size := 16;   
    xlsheet.rows[1].RowHeight := 28;   
  
    for nnn := 1 to ccc do  
    begin  
      xlsheet.columns[nnn].columnwidth := Astringgrid.ColWidths[nnn - 1] * 0.1188;   
    end;   
  
    for nnn := 1 to 4 do begin  
      xlapp.range[xlsheet.cells[2, 1], xlsheet.cells[row - 1, CCC]].borders[nnn].linestyle := 1;   
      xlapp.range[xlsheet.cells[2, 1], xlsheet.cells[row - 1, CCC]].borders[nnn].weight := 1;   
    end;   
  
    xlapp.range[xlsheet.cells[2, 1], xlsheet.cells[row - 1, CCC]].font.size := Afontsize;   
    xlapp.range[xlsheet.cells[2, 1], xlsheet.cells[row - 1, ccc]].WrapText := True;
  
    varclear(xlsheet);   
    varclear(xlapp);
   
  except  
    on E: Exception do
    begin  
      xlapp.quit;   
      s_out:='Eorr';
    end;   
  end;

end;  //end  TStringgridtoexcel
end. //本模块结束标志
