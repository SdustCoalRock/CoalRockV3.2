unit MainReport;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.ExtCtrls, Vcl.ComCtrls,
   {个人定义接口}
  UIWinFrame,UICallPstope, UIGuideMapDll,uIRockPress,RockPressReport,
  System.ImageList, Vcl.ImgList, Vcl.Menus;

type
   pUserRecord =^TUsedDataBase;
  TUsedDataBase=packed record
    UserName: string;
    UserId:String;
    Admin:Boolean;
    Coal_id:string;
    Coal_Name:String;
    Workface_id:String;
    WorkFace_Name:String;
    Drill_id:String;
    Drill_Name:String;
  end;

  TMainFrom = class(TForm)
    MainMemu: TMainMenu;
    M_HELP: TMenuItem;
    M_HELP_Version: TMenuItem;
    N1: TMenuItem;
    N12: TMenuItem;
    N4: TMenuItem;
    M_HELP_HELP1: TMenuItem;
    ImageList1: TImageList;
    StatusBar1: TStatusBar;
    N2: TMenuItem;
    word1: TMenuItem;
    Rightpanel: TPanel;
    Leftpanel: TPanel;
    Splitter1: TSplitter;
    N3: TMenuItem;
    N5: TMenuItem;
    Timer1: TTimer;
    procedure FormCreate(Sender: TObject);
    procedure FormDestroy(Sender: TObject);
    procedure FormShow(Sender: TObject);
    procedure LeftpanelResize(Sender: TObject);
    procedure FormCloseQuery(Sender: TObject; var CanClose: Boolean);
    procedure N3Click(Sender: TObject);
    procedure N5Click(Sender: TObject);
    procedure Timer1Timer(Sender: TObject);
  private
    { Private declarations }
    StatusCaption:string;
    pUser:pUserRecord;
    ConnectedDataBase:Boolean;// 数据库链接是否成功
    Create_Public_Modul:Boolean;
    CloseFlag:Boolean;


    UserWin:TDefine_WinFrame; {用户DLL类}
    CallPStope:TDefine_CallPStope;
    Call_MapDll:TDefine_MapDll;
    Call_RockPress:TDefine_RockPress;
    KyFxReport:TWordReport;

    function  CreateDLLClass:Boolean;
    procedure FreeDLLClass;
    procedure RefreshUsedInformation;
    procedure SetStatusBarDisplay;
    procedure CreateSaveBmpDirectory;
    procedure OpenKYFXReoprt;

  public
    { Public declarations }
     ExMinJinDao:String;

     function ConnectDataBase:Boolean;
     function KillProgram(WindowTitle : string):Boolean;


  end;

var
  MainFrom: TMainFrom;

implementation

{$R *.dfm}

uses Lu_Public_BasicModual, UMainDataModule, UForm_ContourGraph, RockPresstool,TlHelp32 ;
{引用  'LibWinFrame.dll'， 为 UserWin:TWinFrame 服务}
function TuseWin:TClassStateMent_WinFrame; external 'LibWinFrame.dll' ;
{引用  'LibCallPstope.dll'， 为 TuserCallPstope 服务}
function TCallPStope:TClassStateMent_CallPStope; external 'LibCallPStope.dll' ;
{引用  'LibMapDll.dll'， 为 TCallMmapDll 服务}
function TCallMapDll:TClassStateMent_MapDll; external 'LibMapDll.dll' ;
{引用  'LibRockPress.dll'， 为 TCallRockPress 服务}
function TCallRockPress:TClassStateMent_RockPress; external 'LibRockPress.dll' ;


function TMainFrom.ConnectDataBase: Boolean;
var
  DataType,IP,Password,Port,User,DataBase:String;
  intPort:Integer;
begin
   Result:=False;
   if not Public_Basic.ReadDataBaseType(DataType) then exit;
   if not Public_Basic.ReadMySqlDataBase(DataType,IP,User,Password,Port,DAtaBase)  then
           exit;
   if Port<> '' then   begin
      intPort:=StrToInt(Port);
   end else begin
      intPort:=0;
   end;

   if  not Assigned(UserWin)  then exit;
   if  UserWin.ConnectDataBase(     PansiChar(AnsiString(DataType)),
                                         PansiChar(AnsiString(DataBase)),
                                         PansiChar(AnsiString(Ip)),
                                         intPort,
                                         PansiChar(AnsiString(User)),
                                         PansiChar(AnsiString(Password))
                                      ) then  begin
                 Result:=True;
                 ConnectedDataBase:=True;
    end;

end;

function TMainFrom.CreateDLLClass: Boolean;
var
  UN:PansiChar;
begin
   Result:=true;
   try
       if not Assigned(Public_Basic) then begin
          Public_Basic:=TLu_BasicClass.Create('','serverinfo.dll');
          Public_Basic.SetStatusCaption(StatusCaption);
          Public_Basic.InitStatusBar(self.StatusBar1);
       end;
       {'LibWinFrame.dll' 的外部类}
       if not Assigned(UserWin) then begin
          UserWin:=TuseWin.Create ;
          UserWin.SetStatuesCaption(PansiChar(Ansistring(StatusCaption)));
       end;
//       {'LibCallPstope.dll' 的外部类}
       if not Assigned(CallPStope) then  begin
           CallPStope:=TCallPstope.Create ;
           CallPStope.SetStatuesCaption(PansiChar(Ansistring(StatusCaption)));
           Public_Basic.Licensing :=CallPStope.VerFityUserName(UN);
           Public_Basic.UseUnitName :=strPas(UN);
       end;
       {LibMapDll.dll的外部类  Call_MapDll}
        if not Assigned(Call_MapDll) then  begin
           Call_MapDll:=TCallMapDll.Create ;
          // Call_MapDll.SetStatuesCaption(PansiChar(Ansistring(StatusCaption)));
       end;
       {LibRockPress.dll 的 外部类 Call_RockPress}
       if not Assigned(Call_RockPress) then  begin
           Call_RockPress:=TCallRockPress.Create ;
           Call_RockPress.SetStatuesCaption(PansiChar(Ansistring(StatusCaption)));
           Call_RockPress.SetPublic_BasicLicending(Public_Basic.Licensing,
                                   PansiChar(Ansistring(Public_Basic.UseUnitName))  );
       end;


       if not Assigned(MainDataModule )then    begin
          MainDataModule:=TDataModule1.Create(nil) ;
          MainDataModule.ExMainPath :=Public_Basic.Get_MyModulePath ;
          MainDataModule.ConnectSystemDataBase;
          Create_Public_Modul:=true;
       end;

       if not Assigned(KyFxReport)  then  begin
           KyFxReport:=TWordReport.Create;
           KyFxReport.SetWordPanel(LeftPanel);
       end;

       //系统初始化
       RefreshUsedInformation;
       Public_Basic.InitStatusBar(self.StatusBar1);
       SetStatusBarDisplay;
       CreateSaveBmpDirectory;//创建临时保存的文件夹
       
   except
       Result:=FaLse;
   end;

end;

procedure TMainFrom.CreateSaveBmpDirectory;
var
  path:Ansistring;
begin
   path:=Public_Basic.Get_MyModulePath+'SaveBMP\FYYD\';
   if not DirectoryExists(path) then begin
       ForceDirectories(path);
    end;

   path:=Public_Basic.Get_MyModulePath+'SaveBMP\KYJG\';
   if not DirectoryExists(path) then begin
       ForceDirectories(path);
    end;
   path:=Public_Basic.Get_MyModulePath+'SaveBMP\KYFX\';

   if not DirectoryExists(path) then begin
       ForceDirectories(path);
    end;

end;

procedure TMainFrom.FormCloseQuery(Sender: TObject; var CanClose: Boolean);
begin
     KillProgram('WINWORD.EXE');
end;

procedure TMainFrom.FormCreate(Sender: TObject);
begin
   Set8087CW($133f); { Disable all fpu exceptions }

   New(PUser);
   StatusCaption:='山东科技大学宋振骐院士团队研发 CopyRight (2004-2020)';
   LeftPanel.Align :=alLeft;
   splitter1.Align:=alLeft;

   RightPanel.Align :=alClient;


   ConnectedDataBase:=False;
   if not CreateDLLClass then      exit;

   CloseFlag:=False;
   // 自动打印报告
   OpenKYFXReoprt;

end;

procedure TMainFrom.FormDestroy(Sender: TObject);
begin
   try
      FreeDLLClass;
      Dispose(PUser);
   finally

   end;
end;

procedure TMainFrom.FormShow(Sender: TObject);
begin
   // 链接数据库
   if not  ConnectedDataBase  then
   if   ConnectDataBase then exit;

end;

procedure TMainFrom.FreeDLLClass;
begin
    if  Create_Public_Modul then
      if Assigned(MainDataModule) then   FreeAndNil(MainDataModule);

    if Assigned(CallPStope) then  FreeAndNil(CallPStope);
    if Assigned(Call_MapDll) then FreeAndNil(Call_MapDll);
    if Assigned(Call_RockPress) then FreeAndNil(Call_RockPress);
    if Assigned(UserWin) then  FreeAndNil(UserWin);
    if Assigned(Public_Basic) then  FreeAndNil(Public_Basic);
    if Assigned(KyFxReport)  then   FreeAndNil(KyFxReport);
end;

function TMainFrom.KillProgram(WindowTitle: string):Boolean;
const
    PROCESS_TERMINATE = $0001;
var
    _vHandle : THandle;
    _vProEntry : TProcessEntry32;
    _vIsFound : Boolean;
    _vTempStr : string;
begin
    Result := False;
    _vHandle := CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0);
    try
      _vProEntry.dwSize := SizeOf(_vProEntry);
      _vIsFound := Process32First(_vHandle, _vProEntry);
      while _vIsFound do     begin
          _vTempStr := _vProEntry.szExeFile;
          if (UpperCase(_vTempStr) = UpperCase(ExtractFileName(WindowTitle))) or
          (UpperCase(_vTempStr) = UpperCase(WindowTitle)) then          begin
              Result := TerminateProcess(OpenProcess(PROCESS_TERMINATE,
              Boolean(0), _vProEntry.th32ProcessID), 0);
          end;
          _vIsFound := Process32Next(_vHandle, _vProEntry);
      end;
    finally
      CloseHandle(_vHandle);
    end;

end;

procedure TMainFrom.LeftpanelResize(Sender: TObject);
begin
   if Assigned(KyFxReport) then
            KyFxReport.ReSize;
end;

procedure TMainFrom.N3Click(Sender: TObject);
begin
   OpenKYFXReoprt;
end;

procedure TMainFrom.N5Click(Sender: TObject);
begin
   KyFxReport.SetReportExit(true);
end;

procedure TMainFrom.OpenKYFXReoprt;
var
  MinD,MaxD:integer;
  s_temp:Str_DT_array;
  C1:integer;

begin
    WindowState:=wsMaximized; //wsMaximized   wsMinimized
    //self.Hide ;
    s_temp:=Public_Basic.split(ExMinJinDao,'_',C1);
    if s_temp[0]='' then begin
       MinD:=0;
       MaxD:=0;
    end else begin
       MinD:=Public_Basic.StrToInt_lu(s_temp[0]);
       MaxD:=Public_Basic.StrToInt_lu(s_temp[1]);
    end;



    Open_innFrom(RightPanel.Handle,MinD,MaxD,1);
    if Assigned(FormPressTool) then  FormPressTool.close;
    Form_ContourGraph.But_Start_KYFX.Click ;
//
    KyFxReport.SetDrawGraph(Form_ContourGraph.DrawGzm,CallPStope);
    if KyFxReport.ReportAnsysisRockPress(RightPanel.Handle ,Form_ContourGraph.DrawGzm.FGzm ) then
    begin
       CloseFlag:=true;
       Timer1.Enabled :=true;
    end;


end;

procedure TMainFrom.RefreshUsedInformation;
VAr
  AdminB:String;
begin
   Public_Basic.ReadLoginInfo('UserInFormation',PUser.UserName,PUser.UserId,AdminB);
   if AdminB='1' then PUser.Admin :=true else PUser.Admin :=False;
   Public_Basic.ReadUsedMeiKuangInfo('UsedCoalInfo',PUser.Coal_id,PUser.Coal_Name,
            PUser.Workface_id,PUser.WorkFace_Name,PUser.Drill_id,PUser.Drill_Name);
   if Trim(PUser.Coal_Name)<>'' then
       StatusBar1.Panels[1].Text:='你现在模拟的是【'+PUser.Coal_Name+'煤矿内_'+PUser.WorkFace_Name+'】采煤工作面';
end;


procedure TMainFrom.SetStatusBarDisplay;
begin

    StatusBar1.Panels[0].Text:='欢迎你【'+PUser.UserName+'】光临';
    if Trim(PUser.Coal_Name)<>'' then
       StatusBar1.Panels[1].Text:='你现在模拟的是【'+PUser.Coal_Name+'煤矿内_'+PUser.WorkFace_Name+'】采煤工作面';

    StatusBar1.Panels[2].Text:= StatusCaption  ;
end;

procedure TMainFrom.Timer1Timer(Sender: TObject);
begin
    if CloseFlag then begin
       Timer1.Enabled :=False;
       Close;
    end;

end;

end.
